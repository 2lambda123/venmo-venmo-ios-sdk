// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		68204619187F586B0048D382 /* VenmoClient.m in Sources */ = {isa = PBXBuildFile; fileRef = C9DB58F513F0941200EB4C16 /* VenmoClient.m */; };
		6820461A187F586B0048D382 /* VenmoErrors.m in Sources */ = {isa = PBXBuildFile; fileRef = C9C04BED141EE9D40033DDFF /* VenmoErrors.m */; };
		6820461B187F586B0048D382 /* VenmoTransaction.m in Sources */ = {isa = PBXBuildFile; fileRef = C9BD6C7313EEE06400F4D8F4 /* VenmoTransaction.m */; };
		6820461C187F586B0048D382 /* VenmoViewController.m in Sources */ = {isa = PBXBuildFile; fileRef = C9DB590813F18BD000EB4C16 /* VenmoViewController.m */; };
		6820461D187F588D0048D382 /* NSBundle+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C923BC891412A60600E8B194 /* NSBundle+Venmo.m */; };
		6820461E187F588D0048D382 /* NSDictionary+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C96ED75013FC83C30033EF3D /* NSDictionary+Venmo.m */; };
		6820461F187F588D0048D382 /* NSError+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C9C04BE9141E40DA0033DDFF /* NSError+Venmo.m */; };
		68204620187F588D0048D382 /* NSString+MD5Addition.m in Sources */ = {isa = PBXBuildFile; fileRef = 75DEB9E117CD040F0050B284 /* NSString+MD5Addition.m */; };
		68204621187F588D0048D382 /* NSString+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C96ED74C13FC83A20033EF3D /* NSString+Venmo.m */; };
		68204622187F588D0048D382 /* NSURL+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C9842F13140EE7A5000A5924 /* NSURL+Venmo.m */; };
		68204623187F588D0048D382 /* UIDevice+IdentifierAddition.m in Sources */ = {isa = PBXBuildFile; fileRef = 75DEB9E717CD04190050B284 /* UIDevice+IdentifierAddition.m */; };
		68204624187F588D0048D382 /* VenmoActivityView.m in Sources */ = {isa = PBXBuildFile; fileRef = C94D4A9113FDD5CB00CE8EC0 /* VenmoActivityView.m */; };
		68204625187F588D0048D382 /* VenmoBase64.m in Sources */ = {isa = PBXBuildFile; fileRef = C9CCEF4913F9720500654E24 /* VenmoBase64.m */; };
		68204626187F588D0048D382 /* VenmoHMAC_SHA256.m in Sources */ = {isa = PBXBuildFile; fileRef = C9A23604141D425F00C9A8FF /* VenmoHMAC_SHA256.m */; };
		682D848F187F596300961CF1 /* UIKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9DB590B13F18CA000EB4C16 /* UIKit.framework */; };
		687203A1187F4FD800562041 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9BD6C6D13EEE06400F4D8F4 /* Foundation.framework */; };
		687203A7187F4FD800562041 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 687203A5187F4FD800562041 /* InfoPlist.strings */; };
		687203AB187F4FD800562041 /* VenmoAppSwitchSDK.m in Sources */ = {isa = PBXBuildFile; fileRef = 687203AA187F4FD800562041 /* VenmoAppSwitchSDK.m */; };
		687203B2187F4FD800562041 /* XCTest.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 687203B1187F4FD800562041 /* XCTest.framework */; };
		687203B3187F4FD800562041 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9BD6C6D13EEE06400F4D8F4 /* Foundation.framework */; };
		687203B4187F4FD800562041 /* UIKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9DB590B13F18CA000EB4C16 /* UIKit.framework */; };
		687203B9187F4FD800562041 /* VenmoAppSwitchSDK.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 687203A0187F4FD800562041 /* VenmoAppSwitchSDK.framework */; };
		687203BF187F4FD800562041 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 687203BD187F4FD800562041 /* InfoPlist.strings */; };
		687203C1187F4FD800562041 /* VenmoAppSwitchSDKTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 687203C0187F4FD800562041 /* VenmoAppSwitchSDKTests.m */; };
		687203C9187F502400562041 /* Venmo.h in Resources */ = {isa = PBXBuildFile; fileRef = C9589A4713FB141800364F83 /* Venmo.h */; };
		687203CA187F502400562041 /* VenmoClient.h in Resources */ = {isa = PBXBuildFile; fileRef = C9DB58F413F0941200EB4C16 /* VenmoClient.h */; };
		687203CB187F502400562041 /* VenmoClient.m in Resources */ = {isa = PBXBuildFile; fileRef = C9DB58F513F0941200EB4C16 /* VenmoClient.m */; };
		687203CC187F502400562041 /* VenmoErrors.h in Resources */ = {isa = PBXBuildFile; fileRef = C9C04BEC141EE9D30033DDFF /* VenmoErrors.h */; };
		687203CD187F502400562041 /* VenmoErrors.m in Resources */ = {isa = PBXBuildFile; fileRef = C9C04BED141EE9D40033DDFF /* VenmoErrors.m */; };
		687203CE187F502400562041 /* VenmoTransaction.h in Resources */ = {isa = PBXBuildFile; fileRef = C9BD6C7213EEE06400F4D8F4 /* VenmoTransaction.h */; };
		687203CF187F502400562041 /* VenmoTransaction.m in Resources */ = {isa = PBXBuildFile; fileRef = C9BD6C7313EEE06400F4D8F4 /* VenmoTransaction.m */; };
		687203D0187F502400562041 /* VenmoViewController.h in Resources */ = {isa = PBXBuildFile; fileRef = C9DB590713F18BD000EB4C16 /* VenmoViewController.h */; };
		687203D1187F502400562041 /* VenmoViewController.m in Resources */ = {isa = PBXBuildFile; fileRef = C9DB590813F18BD000EB4C16 /* VenmoViewController.m */; };
		687203D3187F505700562041 /* Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C9589A4713FB141800364F83 /* Venmo.h */; settings = {ATTRIBUTES = (Public, ); }; };
		687203D4187F505700562041 /* VenmoClient.h in Headers */ = {isa = PBXBuildFile; fileRef = C9DB58F413F0941200EB4C16 /* VenmoClient.h */; settings = {ATTRIBUTES = (Public, ); }; };
		687203D5187F505700562041 /* VenmoErrors.h in Headers */ = {isa = PBXBuildFile; fileRef = C9C04BEC141EE9D30033DDFF /* VenmoErrors.h */; settings = {ATTRIBUTES = (Public, ); }; };
		687203D6187F505700562041 /* VenmoTransaction.h in Headers */ = {isa = PBXBuildFile; fileRef = C9BD6C7213EEE06400F4D8F4 /* VenmoTransaction.h */; settings = {ATTRIBUTES = (Public, ); }; };
		687203D7187F505700562041 /* VenmoViewController.h in Headers */ = {isa = PBXBuildFile; fileRef = C9DB590713F18BD000EB4C16 /* VenmoViewController.h */; settings = {ATTRIBUTES = (Public, ); }; };
		687203D8187F506800562041 /* VenmoClient.m in Headers */ = {isa = PBXBuildFile; fileRef = C9DB58F513F0941200EB4C16 /* VenmoClient.m */; };
		687203D9187F506800562041 /* VenmoErrors.m in Headers */ = {isa = PBXBuildFile; fileRef = C9C04BED141EE9D40033DDFF /* VenmoErrors.m */; };
		687203DA187F506800562041 /* VenmoTransaction.m in Headers */ = {isa = PBXBuildFile; fileRef = C9BD6C7313EEE06400F4D8F4 /* VenmoTransaction.m */; };
		687203DB187F506800562041 /* VenmoViewController.m in Headers */ = {isa = PBXBuildFile; fileRef = C9DB590813F18BD000EB4C16 /* VenmoViewController.m */; };
		68B9BDD5187F50930067292E /* VenmoDefines_Internal.h in Headers */ = {isa = PBXBuildFile; fileRef = C9EF43CE1417BDF600F7514A /* VenmoDefines_Internal.h */; };
		68B9BDD6187F50930067292E /* NSBundle+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C923BC881412A60600E8B194 /* NSBundle+Venmo.h */; };
		68B9BDD7187F50930067292E /* NSBundle+Venmo.m in Headers */ = {isa = PBXBuildFile; fileRef = C923BC891412A60600E8B194 /* NSBundle+Venmo.m */; };
		68B9BDD8187F50930067292E /* NSDictionary+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C96ED74F13FC83C20033EF3D /* NSDictionary+Venmo.h */; };
		68B9BDD9187F50930067292E /* NSDictionary+Venmo.m in Headers */ = {isa = PBXBuildFile; fileRef = C96ED75013FC83C30033EF3D /* NSDictionary+Venmo.m */; };
		68B9BDDA187F50930067292E /* NSError+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C9C04BE8141E40DA0033DDFF /* NSError+Venmo.h */; };
		68B9BDDB187F50930067292E /* NSError+Venmo.m in Headers */ = {isa = PBXBuildFile; fileRef = C9C04BE9141E40DA0033DDFF /* NSError+Venmo.m */; };
		68B9BDDC187F50930067292E /* NSString+MD5Addition.h in Headers */ = {isa = PBXBuildFile; fileRef = 75DEB9E017CD040F0050B284 /* NSString+MD5Addition.h */; };
		68B9BDDD187F50930067292E /* NSString+MD5Addition.m in Headers */ = {isa = PBXBuildFile; fileRef = 75DEB9E117CD040F0050B284 /* NSString+MD5Addition.m */; };
		68B9BDDE187F50930067292E /* NSString+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C96ED74B13FC83A20033EF3D /* NSString+Venmo.h */; };
		68B9BDDF187F50930067292E /* NSString+Venmo.m in Headers */ = {isa = PBXBuildFile; fileRef = C96ED74C13FC83A20033EF3D /* NSString+Venmo.m */; };
		68B9BDE0187F50930067292E /* NSURL+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C9842F12140EE7A5000A5924 /* NSURL+Venmo.h */; };
		68B9BDE1187F50930067292E /* NSURL+Venmo.m in Headers */ = {isa = PBXBuildFile; fileRef = C9842F13140EE7A5000A5924 /* NSURL+Venmo.m */; };
		68B9BDE2187F50930067292E /* UIDevice+IdentifierAddition.h in Headers */ = {isa = PBXBuildFile; fileRef = 75DEB9E617CD04190050B284 /* UIDevice+IdentifierAddition.h */; };
		68B9BDE3187F50930067292E /* UIDevice+IdentifierAddition.m in Headers */ = {isa = PBXBuildFile; fileRef = 75DEB9E717CD04190050B284 /* UIDevice+IdentifierAddition.m */; };
		68B9BDE4187F50930067292E /* VenmoActivityView.h in Headers */ = {isa = PBXBuildFile; fileRef = C94D4A9013FDD5CB00CE8EC0 /* VenmoActivityView.h */; };
		68B9BDE5187F50930067292E /* VenmoActivityView.m in Headers */ = {isa = PBXBuildFile; fileRef = C94D4A9113FDD5CB00CE8EC0 /* VenmoActivityView.m */; };
		68B9BDE6187F50930067292E /* VenmoBase64_Internal.h in Headers */ = {isa = PBXBuildFile; fileRef = C9CCEF4813F9720500654E24 /* VenmoBase64_Internal.h */; };
		68B9BDE7187F50930067292E /* VenmoBase64.m in Headers */ = {isa = PBXBuildFile; fileRef = C9CCEF4913F9720500654E24 /* VenmoBase64.m */; };
		68B9BDE8187F50930067292E /* VenmoHMAC_SHA256_Internal.h in Headers */ = {isa = PBXBuildFile; fileRef = C9A23602141D41ED00C9A8FF /* VenmoHMAC_SHA256_Internal.h */; };
		68B9BDE9187F50930067292E /* VenmoHMAC_SHA256.m in Headers */ = {isa = PBXBuildFile; fileRef = C9A23604141D425F00C9A8FF /* VenmoHMAC_SHA256.m */; };
		75DEB9E217CD040F0050B284 /* NSString+MD5Addition.h in Headers */ = {isa = PBXBuildFile; fileRef = 75DEB9E017CD040F0050B284 /* NSString+MD5Addition.h */; };
		75DEB9E317CD040F0050B284 /* NSString+MD5Addition.m in Sources */ = {isa = PBXBuildFile; fileRef = 75DEB9E117CD040F0050B284 /* NSString+MD5Addition.m */; settings = {COMPILER_FLAGS = "-fno-objc-arc"; }; };
		75DEB9E817CD04190050B284 /* UIDevice+IdentifierAddition.h in Headers */ = {isa = PBXBuildFile; fileRef = 75DEB9E617CD04190050B284 /* UIDevice+IdentifierAddition.h */; };
		75DEB9E917CD04190050B284 /* UIDevice+IdentifierAddition.m in Sources */ = {isa = PBXBuildFile; fileRef = 75DEB9E717CD04190050B284 /* UIDevice+IdentifierAddition.m */; settings = {COMPILER_FLAGS = "-fno-objc-arc"; }; };
		C923BC8A1412A60600E8B194 /* NSBundle+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C923BC881412A60600E8B194 /* NSBundle+Venmo.h */; settings = {ATTRIBUTES = (); }; };
		C923BC8B1412A60600E8B194 /* NSBundle+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C923BC891412A60600E8B194 /* NSBundle+Venmo.m */; };
		C93E83551423F995001FD5CE /* JSONKit.m in Sources */ = {isa = PBXBuildFile; fileRef = C93E83541423F995001FD5CE /* JSONKit.m */; settings = {COMPILER_FLAGS = "-fno-objc-arc"; }; };
		C93E836F1423FB74001FD5CE /* libKiwi.a in Frameworks */ = {isa = PBXBuildFile; fileRef = C93E83641423FA04001FD5CE /* libKiwi.a */; };
		C94D4A9213FDD5CB00CE8EC0 /* VenmoActivityView.h in Headers */ = {isa = PBXBuildFile; fileRef = C94D4A9013FDD5CB00CE8EC0 /* VenmoActivityView.h */; settings = {ATTRIBUTES = (); }; };
		C94D4A9313FDD5CB00CE8EC0 /* VenmoActivityView.m in Sources */ = {isa = PBXBuildFile; fileRef = C94D4A9113FDD5CB00CE8EC0 /* VenmoActivityView.m */; };
		C9550E7813F5C48900212008 /* UIKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9DB590B13F18CA000EB4C16 /* UIKit.framework */; };
		C9550E7913F5C48900212008 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9BD6C6D13EEE06400F4D8F4 /* Foundation.framework */; };
		C9550E8113F5C48900212008 /* main.m in Sources */ = {isa = PBXBuildFile; fileRef = C9550E8013F5C48900212008 /* main.m */; };
		C9550E8513F5C48900212008 /* AppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = C9550E8413F5C48900212008 /* AppDelegate.m */; };
		C9550E8813F5C48900212008 /* WelcomeViewController.m in Sources */ = {isa = PBXBuildFile; fileRef = C9550E8713F5C48900212008 /* WelcomeViewController.m */; };
		C9589A4813FB141800364F83 /* Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C9589A4713FB141800364F83 /* Venmo.h */; settings = {ATTRIBUTES = (); }; };
		C96ED74D13FC83A20033EF3D /* NSString+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C96ED74B13FC83A20033EF3D /* NSString+Venmo.h */; settings = {ATTRIBUTES = (); }; };
		C96ED74E13FC83A20033EF3D /* NSString+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C96ED74C13FC83A20033EF3D /* NSString+Venmo.m */; };
		C96ED75113FC83C30033EF3D /* NSDictionary+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C96ED74F13FC83C20033EF3D /* NSDictionary+Venmo.h */; settings = {ATTRIBUTES = (); }; };
		C96ED75213FC83C30033EF3D /* NSDictionary+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C96ED75013FC83C30033EF3D /* NSDictionary+Venmo.m */; };
		C96ED75513FC85060033EF3D /* NSStringSpecs.m in Sources */ = {isa = PBXBuildFile; fileRef = C96ED75413FC85060033EF3D /* NSStringSpecs.m */; };
		C96ED75813FC87010033EF3D /* NSDictionarySpecs.m in Sources */ = {isa = PBXBuildFile; fileRef = C96ED75713FC87010033EF3D /* NSDictionarySpecs.m */; };
		C9842F14140EE7A6000A5924 /* NSURL+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C9842F12140EE7A5000A5924 /* NSURL+Venmo.h */; settings = {ATTRIBUTES = (); }; };
		C9842F15140EE7A6000A5924 /* NSURL+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C9842F13140EE7A5000A5924 /* NSURL+Venmo.m */; };
		C9A23603141D41ED00C9A8FF /* VenmoHMAC_SHA256_Internal.h in Headers */ = {isa = PBXBuildFile; fileRef = C9A23602141D41ED00C9A8FF /* VenmoHMAC_SHA256_Internal.h */; settings = {ATTRIBUTES = (); }; };
		C9A23605141D425F00C9A8FF /* VenmoHMAC_SHA256.m in Sources */ = {isa = PBXBuildFile; fileRef = C9A23604141D425F00C9A8FF /* VenmoHMAC_SHA256.m */; };
		C9BD6C6E13EEE06400F4D8F4 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9BD6C6D13EEE06400F4D8F4 /* Foundation.framework */; };
		C9BD6C7413EEE06400F4D8F4 /* VenmoTransaction.m in Sources */ = {isa = PBXBuildFile; fileRef = C9BD6C7313EEE06400F4D8F4 /* VenmoTransaction.m */; };
		C9BD6C7F13EEE06400F4D8F4 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9BD6C6D13EEE06400F4D8F4 /* Foundation.framework */; };
		C9BD6C8413EEE06400F4D8F4 /* libVenmo.a in Frameworks */ = {isa = PBXBuildFile; fileRef = C9BD6C6A13EEE06400F4D8F4 /* libVenmo.a */; };
		C9BD6C8D13EEE06400F4D8F4 /* VenmoTransactionSpecs.m in Sources */ = {isa = PBXBuildFile; fileRef = C9BD6C8C13EEE06400F4D8F4 /* VenmoTransactionSpecs.m */; };
		C9C04BEA141E40DB0033DDFF /* NSError+Venmo.h in Headers */ = {isa = PBXBuildFile; fileRef = C9C04BE8141E40DA0033DDFF /* NSError+Venmo.h */; settings = {ATTRIBUTES = (); }; };
		C9C04BEB141E40DB0033DDFF /* NSError+Venmo.m in Sources */ = {isa = PBXBuildFile; fileRef = C9C04BE9141E40DA0033DDFF /* NSError+Venmo.m */; };
		C9C04BEE141EE9D50033DDFF /* VenmoErrors.h in Headers */ = {isa = PBXBuildFile; fileRef = C9C04BEC141EE9D30033DDFF /* VenmoErrors.h */; settings = {ATTRIBUTES = (); }; };
		C9C04BEF141EE9D50033DDFF /* VenmoErrors.m in Sources */ = {isa = PBXBuildFile; fileRef = C9C04BED141EE9D40033DDFF /* VenmoErrors.m */; };
		C9CCEF4A13F9720500654E24 /* VenmoBase64_Internal.h in Headers */ = {isa = PBXBuildFile; fileRef = C9CCEF4813F9720500654E24 /* VenmoBase64_Internal.h */; settings = {ATTRIBUTES = (); }; };
		C9CCEF4B13F9720500654E24 /* VenmoBase64.m in Sources */ = {isa = PBXBuildFile; fileRef = C9CCEF4913F9720500654E24 /* VenmoBase64.m */; };
		C9CCEF4E13F9A82400654E24 /* VenmoBase64Specs.m in Sources */ = {isa = PBXBuildFile; fileRef = C9CCEF4D13F9A82400654E24 /* VenmoBase64Specs.m */; };
		C9CCEF4F13F9EC3100654E24 /* VenmoTransaction.h in Headers */ = {isa = PBXBuildFile; fileRef = C9BD6C7213EEE06400F4D8F4 /* VenmoTransaction.h */; settings = {ATTRIBUTES = (); }; };
		C9DB487A13F1FE1A007241B7 /* VenmoViewControllerSpecs.m in Sources */ = {isa = PBXBuildFile; fileRef = C9DB487913F1FE1A007241B7 /* VenmoViewControllerSpecs.m */; };
		C9DB58F613F0941200EB4C16 /* VenmoClient.h in Headers */ = {isa = PBXBuildFile; fileRef = C9DB58F413F0941200EB4C16 /* VenmoClient.h */; settings = {ATTRIBUTES = (); }; };
		C9DB58F713F0941200EB4C16 /* VenmoClient.m in Sources */ = {isa = PBXBuildFile; fileRef = C9DB58F513F0941200EB4C16 /* VenmoClient.m */; };
		C9DB590013F0A77E00EB4C16 /* VenmoClientSpecs.m in Sources */ = {isa = PBXBuildFile; fileRef = C9DB58FD13F0A55000EB4C16 /* VenmoClientSpecs.m */; };
		C9DB590913F18BD000EB4C16 /* VenmoViewController.h in Headers */ = {isa = PBXBuildFile; fileRef = C9DB590713F18BD000EB4C16 /* VenmoViewController.h */; settings = {ATTRIBUTES = (); }; };
		C9DB590A13F18BD000EB4C16 /* VenmoViewController.m in Sources */ = {isa = PBXBuildFile; fileRef = C9DB590813F18BD000EB4C16 /* VenmoViewController.m */; };
		C9DB590C13F18CA000EB4C16 /* UIKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9DB590B13F18CA000EB4C16 /* UIKit.framework */; };
		C9DB590D13F18D0E00EB4C16 /* UIKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9DB590B13F18CA000EB4C16 /* UIKit.framework */; };
		C9EF43B61417B77700F7514A /* SenTestingKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C9EF43B51417B77700F7514A /* SenTestingKit.framework */; };
		C9EF43CF1417BDF600F7514A /* VenmoDefines_Internal.h in Headers */ = {isa = PBXBuildFile; fileRef = C9EF43CE1417BDF600F7514A /* VenmoDefines_Internal.h */; settings = {ATTRIBUTES = (); }; };
		C9FDFF481403EF510021D967 /* NSInvocation+SpecMethodPrefix.m in Sources */ = {isa = PBXBuildFile; fileRef = C9FDFF471403EF510021D967 /* NSInvocation+SpecMethodPrefix.m */; };
		C9FDFF4F1404007D0021D967 /* VenmoSpecsSpecs.m in Sources */ = {isa = PBXBuildFile; fileRef = C9FDFF4E1404007D0021D967 /* VenmoSpecsSpecs.m */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		687203B5187F4FD800562041 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = C9BD6C6113EEE06400F4D8F4 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 6872039F187F4FD800562041;
			remoteInfo = VenmoAppSwitchSDK;
		};
		687203B7187F4FD800562041 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = C9BD6C6113EEE06400F4D8F4 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 6872039F187F4FD800562041;
			remoteInfo = VenmoAppSwitchSDK;
		};
		C93E83631423FA04001FD5CE /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = C93E835A1423FA04001FD5CE /* Kiwi.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = F5015B9F11583A77002E9A98;
			remoteInfo = Kiwi;
		};
		C93E83651423FA04001FD5CE /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = C93E835A1423FA04001FD5CE /* Kiwi.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = F5015C9E11584017002E9A98;
			remoteInfo = KiwiTests;
		};
		C93E83671423FA04001FD5CE /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = C93E835A1423FA04001FD5CE /* Kiwi.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = A3B16542139967B800E9CC6E;
			remoteInfo = KiwiExamples;
		};
		C93E836B1423FA8B001FD5CE /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = C9BD6C6113EEE06400F4D8F4 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = C9BD6C6913EEE06400F4D8F4;
			remoteInfo = Venmo;
		};
		C93E836D1423FA95001FD5CE /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = C93E835A1423FA04001FD5CE /* Kiwi.xcodeproj */;
			proxyType = 1;
			remoteGlobalIDString = F5015B9E11583A77002E9A98;
			remoteInfo = Kiwi;
		};
		C9AE5B3013FB0783001D0971 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = C9BD6C6113EEE06400F4D8F4 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = C9550E7513F5C48900212008;
			remoteInfo = VenmoApp;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXFileReference section */
		687203A0187F4FD800562041 /* VenmoAppSwitchSDK.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework.static; includeInIndex = 0; path = VenmoAppSwitchSDK.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		687203A4187F4FD800562041 /* VenmoAppSwitchSDK-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "VenmoAppSwitchSDK-Info.plist"; sourceTree = "<group>"; };
		687203A6187F4FD800562041 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		687203A8187F4FD800562041 /* VenmoAppSwitchSDK-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "VenmoAppSwitchSDK-Prefix.pch"; sourceTree = "<group>"; };
		687203A9187F4FD800562041 /* VenmoAppSwitchSDK.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = VenmoAppSwitchSDK.h; sourceTree = "<group>"; };
		687203AA187F4FD800562041 /* VenmoAppSwitchSDK.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = VenmoAppSwitchSDK.m; sourceTree = "<group>"; };
		687203B0187F4FD800562041 /* VenmoAppSwitchSDKTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = VenmoAppSwitchSDKTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		687203B1187F4FD800562041 /* XCTest.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = XCTest.framework; path = Library/Frameworks/XCTest.framework; sourceTree = DEVELOPER_DIR; };
		687203BC187F4FD800562041 /* VenmoAppSwitchSDKTests-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "VenmoAppSwitchSDKTests-Info.plist"; sourceTree = "<group>"; };
		687203BE187F4FD800562041 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		687203C0187F4FD800562041 /* VenmoAppSwitchSDKTests.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = VenmoAppSwitchSDKTests.m; sourceTree = "<group>"; };
		75DEB9E017CD040F0050B284 /* NSString+MD5Addition.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSString+MD5Addition.h"; sourceTree = "<group>"; };
		75DEB9E117CD040F0050B284 /* NSString+MD5Addition.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSString+MD5Addition.m"; sourceTree = "<group>"; };
		75DEB9E617CD04190050B284 /* UIDevice+IdentifierAddition.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "UIDevice+IdentifierAddition.h"; sourceTree = "<group>"; };
		75DEB9E717CD04190050B284 /* UIDevice+IdentifierAddition.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "UIDevice+IdentifierAddition.m"; sourceTree = "<group>"; };
		C923BC881412A60600E8B194 /* NSBundle+Venmo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSBundle+Venmo.h"; sourceTree = "<group>"; };
		C923BC891412A60600E8B194 /* NSBundle+Venmo.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSBundle+Venmo.m"; sourceTree = "<group>"; };
		C93E83531423F995001FD5CE /* JSONKit.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JSONKit.h; sourceTree = "<group>"; };
		C93E83541423F995001FD5CE /* JSONKit.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = JSONKit.m; sourceTree = "<group>"; };
		C93E83561423F9A0001FD5CE /* CHANGELOG.md */ = {isa = PBXFileReference; lastKnownFileType = text; path = CHANGELOG.md; sourceTree = "<group>"; };
		C93E83571423F9A0001FD5CE /* README.md */ = {isa = PBXFileReference; lastKnownFileType = text; path = README.md; sourceTree = "<group>"; };
		C93E835A1423FA04001FD5CE /* Kiwi.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = "wrapper.pb-project"; path = Kiwi.xcodeproj; sourceTree = "<group>"; };
		C93E83691423FA41001FD5CE /* README.md */ = {isa = PBXFileReference; lastKnownFileType = text; path = README.md; sourceTree = "<group>"; };
		C94D4A9013FDD5CB00CE8EC0 /* VenmoActivityView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = VenmoActivityView.h; sourceTree = "<group>"; };
		C94D4A9113FDD5CB00CE8EC0 /* VenmoActivityView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = VenmoActivityView.m; sourceTree = "<group>"; };
		C9550E7613F5C48900212008 /* VenmoApp.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = VenmoApp.app; sourceTree = BUILT_PRODUCTS_DIR; };
		C9550E7C13F5C48900212008 /* VenmoApp-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "VenmoApp-Info.plist"; sourceTree = "<group>"; };
		C9550E8013F5C48900212008 /* main.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = main.m; sourceTree = "<group>"; };
		C9550E8213F5C48900212008 /* VenmoApp-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "VenmoApp-Prefix.pch"; sourceTree = "<group>"; };
		C9550E8313F5C48900212008 /* AppDelegate.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = AppDelegate.h; sourceTree = "<group>"; };
		C9550E8413F5C48900212008 /* AppDelegate.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = AppDelegate.m; sourceTree = "<group>"; xcLanguageSpecificationIdentifier = xcode.lang.objc; };
		C9550E8613F5C48900212008 /* WelcomeViewController.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = WelcomeViewController.h; sourceTree = "<group>"; };
		C9550E8713F5C48900212008 /* WelcomeViewController.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = WelcomeViewController.m; sourceTree = "<group>"; };
		C9589A4713FB141800364F83 /* Venmo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Venmo.h; sourceTree = "<group>"; };
		C96ED74B13FC83A20033EF3D /* NSString+Venmo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSString+Venmo.h"; sourceTree = "<group>"; };
		C96ED74C13FC83A20033EF3D /* NSString+Venmo.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSString+Venmo.m"; sourceTree = "<group>"; };
		C96ED74F13FC83C20033EF3D /* NSDictionary+Venmo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSDictionary+Venmo.h"; sourceTree = "<group>"; };
		C96ED75013FC83C30033EF3D /* NSDictionary+Venmo.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSDictionary+Venmo.m"; sourceTree = "<group>"; };
		C96ED75413FC85060033EF3D /* NSStringSpecs.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSStringSpecs.m; sourceTree = "<group>"; };
		C96ED75713FC87010033EF3D /* NSDictionarySpecs.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSDictionarySpecs.m; sourceTree = "<group>"; };
		C9842F12140EE7A5000A5924 /* NSURL+Venmo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSURL+Venmo.h"; sourceTree = "<group>"; };
		C9842F13140EE7A5000A5924 /* NSURL+Venmo.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSURL+Venmo.m"; sourceTree = "<group>"; };
		C9A23602141D41ED00C9A8FF /* VenmoHMAC_SHA256_Internal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; lineEnding = 0; path = VenmoHMAC_SHA256_Internal.h; sourceTree = "<group>"; xcLanguageSpecificationIdentifier = xcode.lang.objcpp; };
		C9A23604141D425F00C9A8FF /* VenmoHMAC_SHA256.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = VenmoHMAC_SHA256.m; sourceTree = "<group>"; xcLanguageSpecificationIdentifier = xcode.lang.objc; };
		C9BD6C6A13EEE06400F4D8F4 /* libVenmo.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = libVenmo.a; sourceTree = BUILT_PRODUCTS_DIR; };
		C9BD6C6D13EEE06400F4D8F4 /* Foundation.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Foundation.framework; path = System/Library/Frameworks/Foundation.framework; sourceTree = SDKROOT; };
		C9BD6C7113EEE06400F4D8F4 /* Venmo-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Venmo-Prefix.pch"; sourceTree = "<group>"; };
		C9BD6C7213EEE06400F4D8F4 /* VenmoTransaction.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; lineEnding = 0; path = VenmoTransaction.h; sourceTree = "<group>"; xcLanguageSpecificationIdentifier = xcode.lang.objcpp; };
		C9BD6C7313EEE06400F4D8F4 /* VenmoTransaction.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = VenmoTransaction.m; sourceTree = "<group>"; xcLanguageSpecificationIdentifier = xcode.lang.objc; };
		C9BD6C7A13EEE06400F4D8F4 /* VenmoSpecs.octest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = VenmoSpecs.octest; sourceTree = BUILT_PRODUCTS_DIR; };
		C9BD6C8C13EEE06400F4D8F4 /* VenmoTransactionSpecs.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = VenmoTransactionSpecs.m; sourceTree = "<group>"; };
		C9BD6C9913EEE4C100F4D8F4 /* VenmoSpecs-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "VenmoSpecs-Prefix.pch"; sourceTree = "<group>"; };
		C9C04BE8141E40DA0033DDFF /* NSError+Venmo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSError+Venmo.h"; sourceTree = "<group>"; };
		C9C04BE9141E40DA0033DDFF /* NSError+Venmo.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSError+Venmo.m"; sourceTree = "<group>"; };
		C9C04BEC141EE9D30033DDFF /* VenmoErrors.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = VenmoErrors.h; sourceTree = "<group>"; };
		C9C04BED141EE9D40033DDFF /* VenmoErrors.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = VenmoErrors.m; sourceTree = "<group>"; };
		C9CCEF4813F9720500654E24 /* VenmoBase64_Internal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = VenmoBase64_Internal.h; sourceTree = "<group>"; };
		C9CCEF4913F9720500654E24 /* VenmoBase64.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = VenmoBase64.m; sourceTree = "<group>"; };
		C9CCEF4D13F9A82400654E24 /* VenmoBase64Specs.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = VenmoBase64Specs.m; sourceTree = "<group>"; xcLanguageSpecificationIdentifier = xcode.lang.objc; };
		C9DB487913F1FE1A007241B7 /* VenmoViewControllerSpecs.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = VenmoViewControllerSpecs.m; sourceTree = "<group>"; };
		C9DB58F413F0941200EB4C16 /* VenmoClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = VenmoClient.h; sourceTree = "<group>"; };
		C9DB58F513F0941200EB4C16 /* VenmoClient.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = VenmoClient.m; sourceTree = "<group>"; xcLanguageSpecificationIdentifier = xcode.lang.objc; };
		C9DB58FD13F0A55000EB4C16 /* VenmoClientSpecs.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = VenmoClientSpecs.m; sourceTree = "<group>"; };
		C9DB590713F18BD000EB4C16 /* VenmoViewController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = VenmoViewController.h; sourceTree = "<group>"; };
		C9DB590813F18BD000EB4C16 /* VenmoViewController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = VenmoViewController.m; sourceTree = "<group>"; };
		C9DB590B13F18CA000EB4C16 /* UIKit.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = UIKit.framework; path = System/Library/Frameworks/UIKit.framework; sourceTree = SDKROOT; };
		C9EF43B51417B77700F7514A /* SenTestingKit.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = SenTestingKit.framework; path = Library/Frameworks/SenTestingKit.framework; sourceTree = DEVELOPER_DIR; };
		C9EF43CE1417BDF600F7514A /* VenmoDefines_Internal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = VenmoDefines_Internal.h; sourceTree = "<group>"; };
		C9FDFF471403EF510021D967 /* NSInvocation+SpecMethodPrefix.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSInvocation+SpecMethodPrefix.m"; sourceTree = "<group>"; };
		C9FDFF4A1403F6E10021D967 /* VenmoSpecs.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = VenmoSpecs.h; sourceTree = "<group>"; };
		C9FDFF4E1404007D0021D967 /* VenmoSpecsSpecs.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = VenmoSpecsSpecs.m; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		6872039B187F4FD800562041 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				682D848F187F596300961CF1 /* UIKit.framework in Frameworks */,
				687203A1187F4FD800562041 /* Foundation.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		687203AD187F4FD800562041 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				687203B2187F4FD800562041 /* XCTest.framework in Frameworks */,
				687203B9187F4FD800562041 /* VenmoAppSwitchSDK.framework in Frameworks */,
				687203B4187F4FD800562041 /* UIKit.framework in Frameworks */,
				687203B3187F4FD800562041 /* Foundation.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C9550E7313F5C48900212008 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				C9550E7913F5C48900212008 /* Foundation.framework in Frameworks */,
				C9550E7813F5C48900212008 /* UIKit.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C9BD6C6713EEE06400F4D8F4 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				C9BD6C6E13EEE06400F4D8F4 /* Foundation.framework in Frameworks */,
				C9DB590C13F18CA000EB4C16 /* UIKit.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C9BD6C7613EEE06400F4D8F4 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				C9BD6C7F13EEE06400F4D8F4 /* Foundation.framework in Frameworks */,
				C9DB590D13F18D0E00EB4C16 /* UIKit.framework in Frameworks */,
				C9EF43B61417B77700F7514A /* SenTestingKit.framework in Frameworks */,
				C9BD6C8413EEE06400F4D8F4 /* libVenmo.a in Frameworks */,
				C93E836F1423FB74001FD5CE /* libKiwi.a in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		687203A2187F4FD800562041 /* VenmoAppSwitchSDK */ = {
			isa = PBXGroup;
			children = (
				687203A9187F4FD800562041 /* VenmoAppSwitchSDK.h */,
				687203AA187F4FD800562041 /* VenmoAppSwitchSDK.m */,
				687203A3187F4FD800562041 /* Supporting Files */,
			);
			path = VenmoAppSwitchSDK;
			sourceTree = "<group>";
		};
		687203A3187F4FD800562041 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				687203A4187F4FD800562041 /* VenmoAppSwitchSDK-Info.plist */,
				687203A5187F4FD800562041 /* InfoPlist.strings */,
				687203A8187F4FD800562041 /* VenmoAppSwitchSDK-Prefix.pch */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
		687203BA187F4FD800562041 /* VenmoAppSwitchSDKTests */ = {
			isa = PBXGroup;
			children = (
				687203C0187F4FD800562041 /* VenmoAppSwitchSDKTests.m */,
				687203BB187F4FD800562041 /* Supporting Files */,
			);
			path = VenmoAppSwitchSDKTests;
			sourceTree = "<group>";
		};
		687203BB187F4FD800562041 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				687203BC187F4FD800562041 /* VenmoAppSwitchSDKTests-Info.plist */,
				687203BD187F4FD800562041 /* InfoPlist.strings */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
		C93E83521423F959001FD5CE /* Libraries */ = {
			isa = PBXGroup;
			children = (
				C93E83581423F9B6001FD5CE /* JSONKit */,
				C93E83591423F9DA001FD5CE /* Kiwi */,
			);
			path = Libraries;
			sourceTree = "<group>";
		};
		C93E83581423F9B6001FD5CE /* JSONKit */ = {
			isa = PBXGroup;
			children = (
				C93E83561423F9A0001FD5CE /* CHANGELOG.md */,
				C93E83531423F995001FD5CE /* JSONKit.h */,
				C93E83541423F995001FD5CE /* JSONKit.m */,
				C93E83571423F9A0001FD5CE /* README.md */,
			);
			path = JSONKit;
			sourceTree = "<group>";
		};
		C93E83591423F9DA001FD5CE /* Kiwi */ = {
			isa = PBXGroup;
			children = (
				C93E835A1423FA04001FD5CE /* Kiwi.xcodeproj */,
			);
			path = Kiwi;
			sourceTree = "<group>";
		};
		C93E835B1423FA04001FD5CE /* Products */ = {
			isa = PBXGroup;
			children = (
				C93E83641423FA04001FD5CE /* libKiwi.a */,
				C93E83661423FA04001FD5CE /* KiwiTests.octest */,
				C93E83681423FA04001FD5CE /* KiwiExamples.octest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		C94E795A13F57EDB00EA6B78 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				C9BD6C9913EEE4C100F4D8F4 /* VenmoSpecs-Prefix.pch */,
				C9FDFF471403EF510021D967 /* NSInvocation+SpecMethodPrefix.m */,
				C9FDFF4E1404007D0021D967 /* VenmoSpecsSpecs.m */,
				C9FDFF4A1403F6E10021D967 /* VenmoSpecs.h */,
			);
			path = "Supporting Files";
			sourceTree = "<group>";
		};
		C9550E7A13F5C48900212008 /* VenmoApp */ = {
			isa = PBXGroup;
			children = (
				C9550E8313F5C48900212008 /* AppDelegate.h */,
				C9550E8413F5C48900212008 /* AppDelegate.m */,
				C9550E8613F5C48900212008 /* WelcomeViewController.h */,
				C9550E8713F5C48900212008 /* WelcomeViewController.m */,
				C9550E7B13F5C48900212008 /* Supporting Files */,
			);
			path = VenmoApp;
			sourceTree = "<group>";
		};
		C9550E7B13F5C48900212008 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				C9550E7C13F5C48900212008 /* VenmoApp-Info.plist */,
				C9550E8013F5C48900212008 /* main.m */,
				C9550E8213F5C48900212008 /* VenmoApp-Prefix.pch */,
			);
			path = "Supporting Files";
			sourceTree = "<group>";
		};
		C9BD6C5F13EEE06400F4D8F4 = {
			isa = PBXGroup;
			children = (
				C9BD6C6F13EEE06400F4D8F4 /* Venmo */,
				C9550E7A13F5C48900212008 /* VenmoApp */,
				C9BD6C8513EEE06400F4D8F4 /* VenmoSpecs */,
				C93E83521423F959001FD5CE /* Libraries */,
				687203A2187F4FD800562041 /* VenmoAppSwitchSDK */,
				687203BA187F4FD800562041 /* VenmoAppSwitchSDKTests */,
				C9BD6C6C13EEE06400F4D8F4 /* Frameworks */,
				C9BD6C6B13EEE06400F4D8F4 /* Products */,
				C93E83691423FA41001FD5CE /* README.md */,
			);
			sourceTree = "<group>";
		};
		C9BD6C6B13EEE06400F4D8F4 /* Products */ = {
			isa = PBXGroup;
			children = (
				C9BD6C6A13EEE06400F4D8F4 /* libVenmo.a */,
				C9BD6C7A13EEE06400F4D8F4 /* VenmoSpecs.octest */,
				C9550E7613F5C48900212008 /* VenmoApp.app */,
				687203A0187F4FD800562041 /* VenmoAppSwitchSDK.framework */,
				687203B0187F4FD800562041 /* VenmoAppSwitchSDKTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		C9BD6C6C13EEE06400F4D8F4 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				C9BD6C6D13EEE06400F4D8F4 /* Foundation.framework */,
				C9DB590B13F18CA000EB4C16 /* UIKit.framework */,
				C9EF43B51417B77700F7514A /* SenTestingKit.framework */,
				687203B1187F4FD800562041 /* XCTest.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		C9BD6C6F13EEE06400F4D8F4 /* Venmo */ = {
			isa = PBXGroup;
			children = (
				C9589A4713FB141800364F83 /* Venmo.h */,
				C9DB58F413F0941200EB4C16 /* VenmoClient.h */,
				C9DB58F513F0941200EB4C16 /* VenmoClient.m */,
				C9C04BEC141EE9D30033DDFF /* VenmoErrors.h */,
				C9C04BED141EE9D40033DDFF /* VenmoErrors.m */,
				C9BD6C7213EEE06400F4D8F4 /* VenmoTransaction.h */,
				C9BD6C7313EEE06400F4D8F4 /* VenmoTransaction.m */,
				C9DB590713F18BD000EB4C16 /* VenmoViewController.h */,
				C9DB590813F18BD000EB4C16 /* VenmoViewController.m */,
				C9C04BAA141D52390033DDFF /* Private */,
				C9BD6C7013EEE06400F4D8F4 /* Supporting Files */,
			);
			path = Venmo;
			sourceTree = "<group>";
		};
		C9BD6C7013EEE06400F4D8F4 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				C9BD6C7113EEE06400F4D8F4 /* Venmo-Prefix.pch */,
			);
			path = "Supporting Files";
			sourceTree = "<group>";
		};
		C9BD6C8513EEE06400F4D8F4 /* VenmoSpecs */ = {
			isa = PBXGroup;
			children = (
				C96ED75713FC87010033EF3D /* NSDictionarySpecs.m */,
				C96ED75413FC85060033EF3D /* NSStringSpecs.m */,
				C9CCEF4D13F9A82400654E24 /* VenmoBase64Specs.m */,
				C9DB58FD13F0A55000EB4C16 /* VenmoClientSpecs.m */,
				C9BD6C8C13EEE06400F4D8F4 /* VenmoTransactionSpecs.m */,
				C9DB487913F1FE1A007241B7 /* VenmoViewControllerSpecs.m */,
				C94E795A13F57EDB00EA6B78 /* Supporting Files */,
			);
			path = VenmoSpecs;
			sourceTree = "<group>";
		};
		C9C04BAA141D52390033DDFF /* Private */ = {
			isa = PBXGroup;
			children = (
				C9EF43CE1417BDF600F7514A /* VenmoDefines_Internal.h */,
				C923BC881412A60600E8B194 /* NSBundle+Venmo.h */,
				C923BC891412A60600E8B194 /* NSBundle+Venmo.m */,
				C96ED74F13FC83C20033EF3D /* NSDictionary+Venmo.h */,
				C96ED75013FC83C30033EF3D /* NSDictionary+Venmo.m */,
				C9C04BE8141E40DA0033DDFF /* NSError+Venmo.h */,
				C9C04BE9141E40DA0033DDFF /* NSError+Venmo.m */,
				75DEB9E017CD040F0050B284 /* NSString+MD5Addition.h */,
				75DEB9E117CD040F0050B284 /* NSString+MD5Addition.m */,
				C96ED74B13FC83A20033EF3D /* NSString+Venmo.h */,
				C96ED74C13FC83A20033EF3D /* NSString+Venmo.m */,
				C9842F12140EE7A5000A5924 /* NSURL+Venmo.h */,
				C9842F13140EE7A5000A5924 /* NSURL+Venmo.m */,
				75DEB9E617CD04190050B284 /* UIDevice+IdentifierAddition.h */,
				75DEB9E717CD04190050B284 /* UIDevice+IdentifierAddition.m */,
				C94D4A9013FDD5CB00CE8EC0 /* VenmoActivityView.h */,
				C94D4A9113FDD5CB00CE8EC0 /* VenmoActivityView.m */,
				C9CCEF4813F9720500654E24 /* VenmoBase64_Internal.h */,
				C9CCEF4913F9720500654E24 /* VenmoBase64.m */,
				C9A23602141D41ED00C9A8FF /* VenmoHMAC_SHA256_Internal.h */,
				C9A23604141D425F00C9A8FF /* VenmoHMAC_SHA256.m */,
			);
			path = Private;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXHeadersBuildPhase section */
		6872039C187F4FD800562041 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				687203D3187F505700562041 /* Venmo.h in Headers */,
				687203D4187F505700562041 /* VenmoClient.h in Headers */,
				687203D5187F505700562041 /* VenmoErrors.h in Headers */,
				687203D6187F505700562041 /* VenmoTransaction.h in Headers */,
				687203D7187F505700562041 /* VenmoViewController.h in Headers */,
				68B9BDD5187F50930067292E /* VenmoDefines_Internal.h in Headers */,
				68B9BDD6187F50930067292E /* NSBundle+Venmo.h in Headers */,
				68B9BDD7187F50930067292E /* NSBundle+Venmo.m in Headers */,
				68B9BDD8187F50930067292E /* NSDictionary+Venmo.h in Headers */,
				68B9BDD9187F50930067292E /* NSDictionary+Venmo.m in Headers */,
				68B9BDDA187F50930067292E /* NSError+Venmo.h in Headers */,
				68B9BDDB187F50930067292E /* NSError+Venmo.m in Headers */,
				68B9BDDC187F50930067292E /* NSString+MD5Addition.h in Headers */,
				68B9BDDD187F50930067292E /* NSString+MD5Addition.m in Headers */,
				68B9BDDE187F50930067292E /* NSString+Venmo.h in Headers */,
				68B9BDDF187F50930067292E /* NSString+Venmo.m in Headers */,
				68B9BDE0187F50930067292E /* NSURL+Venmo.h in Headers */,
				68B9BDE1187F50930067292E /* NSURL+Venmo.m in Headers */,
				68B9BDE2187F50930067292E /* UIDevice+IdentifierAddition.h in Headers */,
				68B9BDE3187F50930067292E /* UIDevice+IdentifierAddition.m in Headers */,
				68B9BDE4187F50930067292E /* VenmoActivityView.h in Headers */,
				68B9BDE5187F50930067292E /* VenmoActivityView.m in Headers */,
				68B9BDE6187F50930067292E /* VenmoBase64_Internal.h in Headers */,
				68B9BDE7187F50930067292E /* VenmoBase64.m in Headers */,
				68B9BDE8187F50930067292E /* VenmoHMAC_SHA256_Internal.h in Headers */,
				68B9BDE9187F50930067292E /* VenmoHMAC_SHA256.m in Headers */,
				687203D8187F506800562041 /* VenmoClient.m in Headers */,
				687203D9187F506800562041 /* VenmoErrors.m in Headers */,
				687203DA187F506800562041 /* VenmoTransaction.m in Headers */,
				687203DB187F506800562041 /* VenmoViewController.m in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		687203D2187F502E00562041 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C9BD6C6813EEE06400F4D8F4 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				75DEB9E217CD040F0050B284 /* NSString+MD5Addition.h in Headers */,
				C9589A4813FB141800364F83 /* Venmo.h in Headers */,
				C9DB58F613F0941200EB4C16 /* VenmoClient.h in Headers */,
				C9C04BEE141EE9D50033DDFF /* VenmoErrors.h in Headers */,
				C9CCEF4F13F9EC3100654E24 /* VenmoTransaction.h in Headers */,
				C9DB590913F18BD000EB4C16 /* VenmoViewController.h in Headers */,
				C9EF43CF1417BDF600F7514A /* VenmoDefines_Internal.h in Headers */,
				C923BC8A1412A60600E8B194 /* NSBundle+Venmo.h in Headers */,
				C96ED75113FC83C30033EF3D /* NSDictionary+Venmo.h in Headers */,
				C9C04BEA141E40DB0033DDFF /* NSError+Venmo.h in Headers */,
				C96ED74D13FC83A20033EF3D /* NSString+Venmo.h in Headers */,
				C9842F14140EE7A6000A5924 /* NSURL+Venmo.h in Headers */,
				C94D4A9213FDD5CB00CE8EC0 /* VenmoActivityView.h in Headers */,
				C9CCEF4A13F9720500654E24 /* VenmoBase64_Internal.h in Headers */,
				75DEB9E817CD04190050B284 /* UIDevice+IdentifierAddition.h in Headers */,
				C9A23603141D41ED00C9A8FF /* VenmoHMAC_SHA256_Internal.h in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXHeadersBuildPhase section */

/* Begin PBXNativeTarget section */
		6872039F187F4FD800562041 /* VenmoAppSwitchSDK */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 687203C2187F4FD800562041 /* Build configuration list for PBXNativeTarget "VenmoAppSwitchSDK" */;
			buildPhases = (
				6872039A187F4FD800562041 /* Sources */,
				6872039B187F4FD800562041 /* Frameworks */,
				6872039C187F4FD800562041 /* Headers */,
				6872039D187F4FD800562041 /* Resources */,
				6872039E187F4FD800562041 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = VenmoAppSwitchSDK;
			productName = VenmoAppSwitchSDK;
			productReference = 687203A0187F4FD800562041 /* VenmoAppSwitchSDK.framework */;
			productType = "com.apple.product-type.framework.static";
		};
		687203AF187F4FD800562041 /* VenmoAppSwitchSDKTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 687203C5187F4FD800562041 /* Build configuration list for PBXNativeTarget "VenmoAppSwitchSDKTests" */;
			buildPhases = (
				687203AC187F4FD800562041 /* Sources */,
				687203AD187F4FD800562041 /* Frameworks */,
				687203D2187F502E00562041 /* Headers */,
				687203AE187F4FD800562041 /* Resources */,
				687203C8187F4FEF00562041 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
				687203B6187F4FD800562041 /* PBXTargetDependency */,
				687203B8187F4FD800562041 /* PBXTargetDependency */,
			);
			name = VenmoAppSwitchSDKTests;
			productName = VenmoAppSwitchSDKTests;
			productReference = 687203B0187F4FD800562041 /* VenmoAppSwitchSDKTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		C9550E7513F5C48900212008 /* VenmoApp */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = C9550E9213F5C48900212008 /* Build configuration list for PBXNativeTarget "VenmoApp" */;
			buildPhases = (
				C9550E7213F5C48900212008 /* Sources */,
				C9550E7313F5C48900212008 /* Frameworks */,
				C9550E7413F5C48900212008 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				C93E836C1423FA8B001FD5CE /* PBXTargetDependency */,
			);
			name = VenmoApp;
			productName = VenmoApp;
			productReference = C9550E7613F5C48900212008 /* VenmoApp.app */;
			productType = "com.apple.product-type.application";
		};
		C9BD6C6913EEE06400F4D8F4 /* Venmo */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = C9BD6C9013EEE06400F4D8F4 /* Build configuration list for PBXNativeTarget "Venmo" */;
			buildPhases = (
				C9BD6C6613EEE06400F4D8F4 /* Sources */,
				C9BD6C6713EEE06400F4D8F4 /* Frameworks */,
				C9BD6C6813EEE06400F4D8F4 /* Headers */,
				68720399187F4F3300562041 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Venmo;
			productName = Venmo;
			productReference = C9BD6C6A13EEE06400F4D8F4 /* libVenmo.a */;
			productType = "com.apple.product-type.library.static";
		};
		C9BD6C7913EEE06400F4D8F4 /* VenmoSpecs */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = C9BD6C9313EEE06400F4D8F4 /* Build configuration list for PBXNativeTarget "VenmoSpecs" */;
			buildPhases = (
				C9BD6C7513EEE06400F4D8F4 /* Sources */,
				C9BD6C7613EEE06400F4D8F4 /* Frameworks */,
				C9BD6C7713EEE06400F4D8F4 /* Resources */,
				C9BD6C7813EEE06400F4D8F4 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
				C9AE5B3113FB0783001D0971 /* PBXTargetDependency */,
				C93E836E1423FA95001FD5CE /* PBXTargetDependency */,
			);
			name = VenmoSpecs;
			productName = VenmoSpecs;
			productReference = C9BD6C7A13EEE06400F4D8F4 /* VenmoSpecs.octest */;
			productType = "com.apple.product-type.bundle";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		C9BD6C6113EEE06400F4D8F4 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 0500;
				TargetAttributes = {
					687203AF187F4FD800562041 = {
						TestTargetID = C9550E7513F5C48900212008;
					};
				};
			};
			buildConfigurationList = C9BD6C6413EEE06400F4D8F4 /* Build configuration list for PBXProject "Venmo" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = C9BD6C5F13EEE06400F4D8F4;
			productRefGroup = C9BD6C6B13EEE06400F4D8F4 /* Products */;
			projectDirPath = "";
			projectReferences = (
				{
					ProductGroup = C93E835B1423FA04001FD5CE /* Products */;
					ProjectRef = C93E835A1423FA04001FD5CE /* Kiwi.xcodeproj */;
				},
			);
			projectRoot = "";
			targets = (
				C9BD6C6913EEE06400F4D8F4 /* Venmo */,
				C9550E7513F5C48900212008 /* VenmoApp */,
				C9BD6C7913EEE06400F4D8F4 /* VenmoSpecs */,
				6872039F187F4FD800562041 /* VenmoAppSwitchSDK */,
				687203AF187F4FD800562041 /* VenmoAppSwitchSDKTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXReferenceProxy section */
		C93E83641423FA04001FD5CE /* libKiwi.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libKiwi.a;
			remoteRef = C93E83631423FA04001FD5CE /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		C93E83661423FA04001FD5CE /* KiwiTests.octest */ = {
			isa = PBXReferenceProxy;
			fileType = wrapper.cfbundle;
			path = KiwiTests.octest;
			remoteRef = C93E83651423FA04001FD5CE /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		C93E83681423FA04001FD5CE /* KiwiExamples.octest */ = {
			isa = PBXReferenceProxy;
			fileType = wrapper.cfbundle;
			path = KiwiExamples.octest;
			remoteRef = C93E83671423FA04001FD5CE /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
/* End PBXReferenceProxy section */

/* Begin PBXResourcesBuildPhase section */
		6872039D187F4FD800562041 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				687203A7187F4FD800562041 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		687203AE187F4FD800562041 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				687203C9187F502400562041 /* Venmo.h in Resources */,
				687203CA187F502400562041 /* VenmoClient.h in Resources */,
				687203CB187F502400562041 /* VenmoClient.m in Resources */,
				687203CC187F502400562041 /* VenmoErrors.h in Resources */,
				687203CD187F502400562041 /* VenmoErrors.m in Resources */,
				687203CE187F502400562041 /* VenmoTransaction.h in Resources */,
				687203CF187F502400562041 /* VenmoTransaction.m in Resources */,
				687203D0187F502400562041 /* VenmoViewController.h in Resources */,
				687203D1187F502400562041 /* VenmoViewController.m in Resources */,
				687203BF187F4FD800562041 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C9550E7413F5C48900212008 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C9BD6C7713EEE06400F4D8F4 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		68720399187F4F3300562041 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /usr/bin/python;
			shellScript = "# TAG: BUILD SCRIPT (do not remove this comment)\n# Build script generated using https://github.com/kstenerud/iOS-UniversalFramework Mk 8 (beta 2012-06-16)\nimport logging\n\n\n##############################################################################\n#\n# Configuration\n#\n##############################################################################\n\n# Select which kind of framework to build.\n#\n# Note: Due to issues with Xcode's build process, if you select\n#       'embeddedframework', it will still show the regular framework\n#       (as a symlink) along side of the embedded framework. Be sure to\n#       instruct your users to copy/move the embedded framework in this case!\n#\n# If your framework contains resources such as images, nibs, momds, plists,\n# zipfiles and such, choose 'embeddedframework'.\n#\n# If your framework contains no resources, choose 'framework'.\n#\nconfig_framework_type = 'framework'\n#config_framework_type = 'embeddedframework'\n\n# Open the build directory in Finder when the universal framework is\n# successfully built.\n#\n# This value can be overridden by setting the UFW_OPEN_BUILD_DIR env variable\n# to True or False.\n#\n# Recommended setting: True\n#\nconfig_open_build_dir = True\n\n# If true, ensures that all public headers are stored in the framework under\n# the same directory hierarchy as they were in the source tree.\n#\n# Xcode by default places all headers at the same top level, but every other\n# build tool in the known universe preserves directory structure. For simple\n# libraries it doesn't really matter much, but for ports of existing software\n# packages or for bigger libraries, it makes sense to have more structure.\n#\n# The default is set to \"False\" since that's what most Xcode users are used to.\n#\n# Recommended setting: True for deep hierarchy projects, False otherwise.\n#\nconfig_deep_header_hierarchy = False\n\n# Specify where the top of the public header hierarchy is. This path is\n# relative to the project's dir (PROJECT_DIR). You can reference environment\n# variables using templating syntax (e.g. \"${TARGET_NAME}/Some/Subdir\")\n#\n# NOTE: Only used if config_deep_header_hierarchy is True.\n#\n# If this is set to None, the script will attempt to figure out for itself\n# where the top of the header hierarchy is by looking for common path prefixes\n# in the public header files. This process can fail if:\n# - You only have one public header file.\n# - Your source header files don't all have a common root.\n#\n# A common approach is to use \"${TARGET_NAME}\", working under the assumption\n# that all of your header files share the common root of a directory under\n# your project with the same name as your target (which is the Xcode default).\n#\n# Recommended setting: \"${TARGET_NAME}\"\n#\nconfig_deep_header_top = \"${TARGET_NAME}\"\n\n# Warn when \"DerivedData\" is detected in any of the header, library, or\n# framework search paths. In almost all cases, references to directories under\n# DerivedData are added as a result of an Xcode bug and must be manually\n# removed.\n#\n# Recommended setting: True\n#\nconfig_warn_derived_data = True\n\n# Warn if no headers were marked public in this framework.\n#\n# Recommended setting: True\n#\nconfig_warn_no_public_headers = True\n\n# Cause the build to fail if any warnings are issued.\n#\n# Recommended setting: True\n#\nconfig_fail_on_warnings = True\n\n# Minimum log level\n#\n# Recommended setting: logging.INFO\n#\nconfig_log_level = logging.INFO\n\n\n##############################################################################\n#\n# Don't touch anything below here unless you know what you're doing.\n#\n##############################################################################\n\nimport collections\nimport json\nimport os\nimport re\nimport shlex\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport time\nimport traceback\n\n\n##############################################################################\n#\n# Globals\n#\n##############################################################################\n\nlog = logging.getLogger('UFW')\n\nissued_warnings = False\n\n\n##############################################################################\n#\n# Classes\n#\n##############################################################################\n\n# Allows the slave build to communicate with the master build.\n#\nclass BuildState:\n\ndef __init__(self):\nself.reload()\n\ndef reset(self):\nself.slave_platform = None\nself.slave_architectures = []\nself.slave_linked_archive_paths = []\nself.slave_built_fw_path = None\nself.slave_built_embedded_fw_path = None\n\ndef set_slave_properties(self, architectures,\nlinked_archive_paths,\nbuilt_fw_path,\nbuilt_embedded_fw_path):\nself.slave_platform = os.environ['PLATFORM_NAME']\nself.slave_architectures = architectures\nself.slave_linked_archive_paths = linked_archive_paths\nself.slave_built_fw_path = built_fw_path\nself.slave_built_embedded_fw_path = built_embedded_fw_path\n\ndef get_save_path(self):\nreturn os.path.join(os.environ['PROJECT_TEMP_DIR'], \"ufw_build_state.json\")\n\ndef persist(self):\nfilename = self.get_save_path()\nparent = os.path.dirname(filename)\nif not os.path.isdir(parent):\nos.makedirs(parent)\nwith open(filename, \"w\") as f:\nf.write(json.dumps(self.__dict__))\n\ndef reload(self):\nself.reset()\nfilename = self.get_save_path()\nif os.path.exists(filename):\nwith open(filename, \"r\") as f:\nnew_dict = json.loads(f.read())\nif new_dict is not None:\nself.__dict__ = dict(self.__dict__.items() + new_dict.items())\n\n\n# Holds information about the current project and build environment.\n#\nclass Project:\n\ndef __init__(self, filename):\nsourcecode_types = ['sourcecode.c.c',\n'sourcecode.c.objc',\n'sourcecode.cpp.cpp',\n'sourcecode.cpp.objcpp',\n'sourcecode.asm.asm',\n'sourcecode.asm.llvm',\n'sourcecode.nasm']\n\nself.build_state = BuildState()\nself.project_data = self.load_from_file(filename)\nself.target = filter(lambda x: x['name'] == os.environ['TARGET_NAME'], self.project_data['targets'])[0]\nself.public_headers = self.get_build_phase_files('PBXHeadersBuildPhase', lambda x: x.get('settings', False) and x['settings'].get('ATTRIBUTES', False) and 'Public' in x['settings']['ATTRIBUTES'])\nself.static_libraries = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'archive.ar' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\nself.static_frameworks = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'wrapper.framework' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\nself.compilable_sources = self.get_build_phase_files('PBXSourcesBuildPhase', lambda x: x['fileRef']['fileType'] in sourcecode_types)\nself.header_paths = [os.path.join(*x['pathComponents']) for x in self.public_headers]\n\nself.headers_dir = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['CONTENTS_FOLDER_PATH'], 'Headers')\nself.libtool_path = os.path.join(os.environ['DT_TOOLCHAIN_DIR'], 'usr', 'bin', 'libtool')\nself.project_filename = os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\")\nself.local_exe_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])\nself.local_architectures = os.environ['ARCHS'].split(' ')\nself.local_built_fw_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['WRAPPER_NAME'])\nself.local_built_embedded_fw_path = os.path.splitext(self.local_built_fw_path)[0] + \".embeddedframework\"\nself.local_linked_archive_paths = [self.get_linked_ufw_archive_path(arch) for arch in self.local_architectures]\nself.local_platform = os.environ['PLATFORM_NAME']\nother_platforms = os.environ['SUPPORTED_PLATFORMS'].split(' ')\nother_platforms.remove(self.local_platform)\nself.other_platform = other_platforms[0]\n\nsdk_name = os.environ['SDK_NAME']\nif not sdk_name.startswith(self.local_platform):\nraise Exception(\"%s didn't start with %s\" % (sdk_name, self.local_platform))\nself.sdk_version = sdk_name[len(self.local_platform):]\n\n# Load an Xcode project file.\n#\ndef load_from_file(self, filename):\nproject_file = json.loads(subprocess.check_output([\"plutil\", \"-convert\", \"json\", \"-o\", \"-\", filename]))\nall_objects = project_file['objects']\ndel project_file['objects']\nfor obj in all_objects.values():\nself.fix_keys(obj)\nself.unpack_objects(self.build_dereference_list(all_objects, None, None, project_file))\nself.unpack_objects(self.build_dereference_list(all_objects, None, None, all_objects.values()))\nproject_data = project_file['rootObject']\nself.build_full_paths(project_data, splitpath(os.environ['SOURCE_ROOT']))\nreturn project_data\n\ndef is_key(self, obj):\nreturn isinstance(obj, basestring) and len(obj) == 24 and re.search('^[0-9a-fA-F]+$', obj) is not None\n\ndef build_dereference_list(self, all_objects, parent, key, obj):\nderef_list = []\nif self.is_key(obj):\ndereferenced = all_objects.get(obj, obj)\nif dereferenced is not obj:\nderef_list.append((parent, key, obj, dereferenced))\nelif isinstance(obj, collections.Mapping):\nfor k, v in obj.iteritems():\nderef_list += self.build_dereference_list(all_objects, obj, k, v)\nelif isinstance(obj, collections.Iterable) and not isinstance(obj, basestring):\nfor item in obj:\nderef_list += self.build_dereference_list(all_objects, obj, None, item)\nreturn deref_list\n\ndef unpack_objects(self, deref_list):\nfor parent, key, orig, obj in deref_list:\nif key is None:\nparent.remove(orig)\nparent.append(obj)\nelse:\nparent[key] = obj\n\n# Store the full path, separated into components, to a node inside the node\n# as \"pathComponents\". Also recurse into that node if it's a group.\n#\ndef build_full_paths(self, node, base_path):\n# Some nodes are relative to a different source tree, specified as an\n# env variable.\nif node.get('sourceTree', '<group>') != '<group>':\nnew_base_path = os.environ.get(node['sourceTree'], None)\nif new_base_path:\nbase_path = splitpath(new_base_path)\n# Add the current node's path, if any.\nif node.get('path', False):\nbase_path = base_path + splitpath(node['path'])\nnode['pathComponents'] = base_path\n# Recurse if this is a group.\nif node['isa'] == 'PBXGroup':\nfor child in node['children']:\nself.build_full_paths(child, base_path)\nelif node['isa'] == 'PBXProject':\nself.build_full_paths(node['mainGroup'], base_path)\nself.build_full_paths(node['productRefGroup'], base_path)\nfor child in node['targets']:\nself.build_full_paths(child, base_path)\nprojectRefs = node.get('projectReferences', None)\nif projectRefs is not None:\nfor child in projectRefs[0].values():\nself.build_full_paths(child, base_path)\n\n# Fix up any inconvenient keys.\n#\ndef fix_keys(self, obj):\nkey_remappings = {'lastKnownFileType': 'fileType', 'explicitFileType': 'fileType'}\nfor key in list(set(key_remappings.keys()) & set(obj.keys())):\nobj[key_remappings[key]] = obj[key]\ndel obj[key]\n\n# Get the files from a build phase.\n#\ndef get_build_phase_files(self, build_phase_name, filter_func):\nbuild_phase = filter(lambda x: x['isa'] == build_phase_name, self.target['buildPhases'])[0]\nbuild_files = filter(filter_func, build_phase['files'])\nreturn [x['fileRef'] for x in build_files]\n\n# Get the truncated paths of all headers that start with the specified\n# relative path. Paths are read and returned as fully separated lists.\n# e.g. ['Some', 'Path', 'To', 'A', 'Header'] with relative_path of\n# ['Some', 'Path'] gets truncated to ['To', 'A', 'Header']\n#\ndef movable_headers_relative_to(self, relative_path):\nrel_path_length = len(relative_path)\nresult = filter(lambda path: len(path) >= rel_path_length and\npath[:rel_path_length] == relative_path, self.header_paths)\nreturn [path[rel_path_length:] for path in result]\n\n# Get the full path to where a linkable archive (library or framework)\n# is supposed to be.\n#\ndef get_linked_archive_path(self, architecture):\nreturn os.path.join(os.environ['OBJECT_FILE_DIR_%s' % os.environ['CURRENT_VARIANT']],\narchitecture,\nos.environ['EXECUTABLE_NAME'])\n\n# Get the full path to our custom linked archive of the project.\n#\ndef get_linked_ufw_archive_path(self, architecture):\nreturn self.get_linked_archive_path(architecture) + \".ufwbuild\"\n\n# Get the full path to the executable of an archive.\n#\ndef get_exe_path(self, node):\npath = os.path.join(*node['pathComponents'])\nif node['fileType'] == 'wrapper.framework':\n# Frameworks are directories, so go one deeper\npath = os.path.join(path, os.path.splitext(node['pathComponents'][-1])[0])\nreturn path\n\n# Get the path to the directory containing the archive.\n#\ndef get_containing_path(self, node):\nreturn os.path.join(*node['pathComponents'])\n\ndef get_archive_search_paths(self):\nlog.info(\"Search paths = %s\" % set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries]))\nreturn set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries])\n\n# Command to link all objects of a single architecture.\n#\ndef get_single_arch_link_command(self, architecture):\ncmd = [self.libtool_path,\n\"-static\",\n\"-arch_only\", architecture,\n\"-syslibroot\", os.environ['SDKROOT'],\n\"-L%s\" % os.environ['TARGET_BUILD_DIR'],\n\"-filelist\", os.environ['LINK_FILE_LIST_%s_%s' % (os.environ['CURRENT_VARIANT'], architecture)]]\nif os.environ.get('OTHER_LDFLAGS', False):\ncmd += [os.environ['OTHER_LDFLAGS']]\nif os.environ.get('WARNING_LDFLAGS', False):\ncmd += [os.environ['WARNING_LDFLAGS']]\n#        cmd += [\"-L%s\" % libpath for libpath in self.get_archive_search_paths()]\ncmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\ncmd += [self.get_exe_path(lib) for lib in self.static_libraries]\ncmd += [\"-o\", self.get_linked_ufw_archive_path(architecture)]\nreturn cmd\n\n# Command to link all local architectures for the current configuration\n# into an archive. This reads all libraries + the UFW-built archives and\n# overwrites the final product.\n#\ndef get_local_archs_link_command(self):\ncmd = [self.libtool_path,\n\"-static\"]\ncmd += self.local_linked_archive_paths\ncmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\ncmd += [self.get_exe_path(lib) for lib in self.static_libraries]\ncmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\nreturn cmd\n\n# Command to link all architectures into a universal archive.\n# This reads all UFW-built archives and overwrites the final product.\n#\ndef get_all_archs_link_command(self):\ncmd = [self.libtool_path,\n\"-static\"]\ncmd += self.local_linked_archive_paths + self.build_state.slave_linked_archive_paths\ncmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\nreturn cmd\n\n# Build up an environment for the slave process. This uses BUILD_ROOT\n# and TEMP_ROOT to convert all environment variables to values suitable\n# for the slave build environment so that xcodebuild doesn't try to build\n# in the project directory under \"build\".\n#\ndef get_slave_environment(self):\nignored = ['LD_MAP_FILE_PATH',\n'HEADER_SEARCH_PATHS',\n'LIBRARY_SEARCH_PATHS',\n'FRAMEWORK_SEARCH_PATHS']\nbuild_root = os.environ['BUILD_ROOT']\ntemp_root = os.environ['TEMP_ROOT']\nnewenv = {}\nfor key, value in os.environ.items():\nif key not in ignored and not key.startswith('LINK_FILE_LIST_') and not key.startswith('LD_DEPENDENCY_'):\nif build_root in value or temp_root in value:\nnewenv[key] = value.replace(self.local_platform, self.other_platform)\nreturn newenv\n\n# Command to invoke xcodebuild on the slave platform.\n#\ndef get_slave_project_build_command(self):\ncmd = [\"xcodebuild\",\n\"-project\",\nos.environ['PROJECT_FILE_PATH'],\n\"-target\",\nos.environ['TARGET_NAME'],\n\"-configuration\",\nos.environ['CONFIGURATION'],\n\"-sdk\",\nself.other_platform + self.sdk_version]\ncmd += [\"%s=%s\" % (key, value) for key, value in self.get_slave_environment().items()]\ncmd += [\"UFW_MASTER_PLATFORM=\" + os.environ['PLATFORM_NAME']]\ncmd += [os.environ['ACTION']]\nreturn cmd\n\n\n\n##############################################################################\n#\n# Utility Functions\n#\n##############################################################################\n\n# Split a path into a list of path components.\n#\ndef splitpath(path, maxdepth=20):\n(head, tail) = os.path.split(path)\nreturn splitpath(head, maxdepth - 1) + [tail] if maxdepth and head and head != path else [ head or tail ]\n\n# Remove all subdirectories under a path.\n#\ndef remove_subdirs(path, ignore_files):\nif os.path.exists(path):\nfor filename in filter(lambda x: x not in ignore_files, os.listdir(path)):\nfullpath = os.path.join(path, filename)\nif os.path.isdir(fullpath):\nlog.info(\"Remove %s\" % fullpath)\nshutil.rmtree(fullpath)\n\n# Make whatever parent paths are necessary for a path to exist.\n#\ndef ensure_path_exists(path):\nif not os.path.isdir(path):\nos.makedirs(path)\n\n# Make whatever parent paths are necessary for a path's parent to exist.\n#\ndef ensure_parent_exists(path):\nparent = os.path.dirname(path)\nif not os.path.isdir(parent):\nos.makedirs(parent)\n\n# Remove a file or dir if it exists.\n#\ndef remove_path(path):\nif os.path.exists(path):\nif os.path.isdir(path) and not os.path.islink(path):\nshutil.rmtree(path)\nelse:\nos.remove(path)\n\n# Move a file or dir, replacing the destination if it exists.\n#\ndef move_file(src, dst):\nif src == dst or not os.path.isfile(src):\nreturn\nlog.info(\"Move %s to %s\" % (src, dst))\nensure_parent_exists(dst)\nremove_path(dst)\nshutil.move(src, dst)\n\n# Copy a file or dir, replacing the destination if it exists already.\n#\ndef copy_overwrite(src, dst):\nif src != dst:\nremove_path(dst)\nensure_parent_exists(dst)\nshutil.copytree(src, dst, symlinks=True)\n\n# Attempt to symlink link_path -> link_to.\n# link_to must be a path relative to link_path's parent and must exist.\n# If link_path already exists, do nothing.\n#\ndef attempt_symlink(link_path, link_to):\n# Only allow linking to an existing file\nos.stat(os.path.abspath(os.path.join(link_path, \"..\", link_to)))\n\n# Only make the link if it hasn't already been made\nif not os.path.exists(link_path):\nlog.info(\"Symlink %s -> %s\" % (link_path, link_to))\nos.symlink(link_to, link_path)\n\n# Takes the last entry in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef top_level_file_path(base_path, path_list):\nreturn os.path.join(base_path, os.path.split(path_list[-1])[-1])\n\n# Takes all entries in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef full_file_path(base_path, path_list):\nreturn os.path.join(*([base_path] + path_list))\n\n# Print a command before executing it.\n# Also print out all output from the command to STDOUT.\n#\ndef print_and_call(cmd):\nlog.info(\"Cmd \" + \" \".join(cmd))\np = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nresult = p.communicate()[0]\nif len(result) > 0:\nlog.info(result)\nif p.returncode != 0:\nraise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Special print-and-call command for the slave build that strips out\n# xcodebuild's spammy list of environment variables.\n#\ndef print_and_call_slave_build(cmd, other_platform):\nseparator = '=== BUILD NATIVE TARGET '\np = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nresult = p.communicate()[0].split(separator)\nif len(result) == 1:\nresult = result[0]\nelse:\nresult = separator + result[1]\nlog.info(\"Cmd \" + \" \".join(cmd) + \"\\n\" + result)\nif p.returncode != 0:\nraise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Issue a warning and record that a warning has been issued.\n#\ndef issue_warning(msg, *args, **kwargs):\nglobal issued_warnings\nissued_warnings = True\nlog.warn(msg, *args, **kwargs)\n\n\n\n##############################################################################\n#\n# Main Application\n#\n##############################################################################\n\n# Check if we are running as master.\n#\ndef is_master():\nreturn os.environ.get('UFW_MASTER_PLATFORM', os.environ['PLATFORM_NAME']) == os.environ['PLATFORM_NAME']\n\n# DerivedData should almost never appear in any framework, library, or header\n# search paths. However, Xcode will sometimes add them in, so we check to make\n# sure.\n#\ndef check_for_derived_data_in_search_paths(project):\nsearch_path_keys = [\"FRAMEWORK_SEARCH_PATHS\", \"LIBRARY_SEARCH_PATHS\", \"HEADER_SEARCH_PATHS\"]\nbuild_configs = project.target['buildConfigurationList']['buildConfigurations']\nbuild_settings = filter(lambda x: x['name'] == os.environ['CONFIGURATION'], build_configs)[0]['buildSettings']\n\nfound_something = False\nfor path_key in filter(lambda x: x in build_settings, search_path_keys):\npath = build_settings[path_key]\nif \"DerivedData\" in path:\nfound_something = True\nlog.warn(\"Derived data in %s\" % path)\nissue_warning(\"'%s' contains reference to 'DerivedData'.\" % path_key)\nif found_something:\nlog.warn(\"Check your build settings and remove any entries that contain paths inside the DerivedData folder.\")\nlog.warn(\"Otherwise you can disable this warning by changing 'config_warn_derived_data' in this script.\")\n\n# Link local architectures into their respective archives.\n#\ndef link_local_archs(project):\nfor arch in project.local_architectures:\nprint_and_call(project.get_single_arch_link_command(arch))\n\n# Link only the local architectures into the final product, not the slave\n# architectures. For iphoneos, this will be armv6, armv7. For simulator, this\n# will be i386.\n#\ndef link_combine_local_archs(project):\nprint_and_call(project.get_local_archs_link_command())\n\n# Link all architectures into the final product.\n#\ndef link_combine_all_archs(project):\nprint_and_call(project.get_all_archs_link_command())\n\n# Check if we should open the build directory after a successful build.\n#\ndef should_open_build_dir():\nenv_setting = os.environ.get('UFW_OPEN_BUILD_DIR', None)\nif env_setting is not None:\nreturn env_setting\n\nreturn config_open_build_dir\n\n# Open the build dir in Finder.\n#\ndef open_build_dir():\nprint_and_call(['open', os.environ['TARGET_BUILD_DIR']])\n\n# Check if the build was started by selecting \"Archive\" under \"Product\" in\n# Xcode.\n#\ndef is_archive_build():\n# ACTION is always 'build', but perhaps Apple will fix this someday?\narchive_build = os.environ['ACTION'] == 'archive'\n\nif not archive_build:\n# This can be passed in as an env variable when building from command line.\narchive_build = os.environ.get('UFW_ACTION', None) == 'archive'\n\nbuild_dir = splitpath(os.environ['BUILD_DIR'])\nif not archive_build:\n# This partial path is used when you select \"archive\" from within Xcode.\narchive_build = 'ArchiveIntermediates' in build_dir\n\n# It only counts as a full archive build if this target is being built into\n# its own build dir (not being built as a dependency of another target)\nif archive_build:\narchive_build = os.environ['TARGET_NAME'] in build_dir\n\nreturn archive_build\n\n# Xcode by default throws all public headers into the top level directory.\n# This function moves them to their expected deep hierarchy.\n#\ndef build_deep_header_hierarchy(project):\nheader_path_top = config_deep_header_top\nif not header_path_top:\nheader_path_top = os.path.commonprefix(project.header_paths)\nelse:\nheader_path_top = splitpath(header_path_top)\n\nbuilt_headers_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['PUBLIC_HEADERS_FOLDER_PATH'])\nmovable_headers = project.movable_headers_relative_to(header_path_top)\n\n# Remove subdirs if they only contain files that have been rebuilt\nignore_headers = filter(lambda x: not os.path.isfile(top_level_file_path(built_headers_path, x)), movable_headers)\nremove_subdirs(built_headers_path, [file[0] for file in ignore_headers])\n\n# Move rebuilt headers into their proper subdirs\nfor header in movable_headers:\nmove_file(top_level_file_path(built_headers_path, header), full_file_path(built_headers_path, header))\n\n# Add all symlinks needed to make a full framework structure:\n#\n# MyFramework.framework\n# |-- MyFramework -> Versions/Current/MyFramework\n# |-- Headers -> Versions/Current/Headers\n# |-- Resources -> Versions/Current/Resources\n# `-- Versions\n#     |-- A\n#     |   |-- MyFramework\n#     |   |-- Headers\n#     |   |   `-- MyFramework.h\n#     |   `-- Resources\n#     |       |-- Info.plist\n#     |       |-- MyViewController.nib\n#     |       `-- en.lproj\n#     |           `-- InfoPlist.strings\n#     `-- Current -> A\n#\ndef add_symlinks_to_framework(project):\nbase_dir = project.local_built_fw_path\nattempt_symlink(os.path.join(base_dir, \"Versions\", \"Current\"), os.environ['FRAMEWORK_VERSION'])\nif os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Headers\")):\nattempt_symlink(os.path.join(base_dir, \"Headers\"), os.path.join(\"Versions\", \"Current\", \"Headers\"))\nif os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Resources\")):\nattempt_symlink(os.path.join(base_dir, \"Resources\"), os.path.join(\"Versions\", \"Current\", \"Resources\"))\nattempt_symlink(os.path.join(base_dir, os.environ['EXECUTABLE_NAME']), os.path.join(\"Versions\", \"Current\", os.environ['EXECUTABLE_NAME']))\n\n# Build an embedded framework structure.\n# An embedded framework contains the actual framework, plus a \"Resources\"\n# directory containing symlinks to all resources found in the actual framework,\n# with the exception of \"Info.plist\" and anything ending in \".lproj\":\n#\n# MyFramework.embeddedframework\n# |-- MyFramework.framework\n# |   |-- MyFramework -> Versions/Current/MyFramework\n# |   |-- Headers -> Versions/Current/Headers\n# |   |-- Resources -> Versions/Current/Resources\n# |   `-- Versions\n# |       |-- A\n# |       |   |-- MyFramework\n# |       |   |-- Headers\n# |       |   |   `-- MyFramework.h\n# |       |   `-- Resources\n# |       |       |-- Info.plist\n# |       |       |-- MyViewController.nib\n# |       |       `-- en.lproj\n# |       |           `-- InfoPlist.strings\n# |       `-- Current -> A\n# `-- Resources\n#     `-- MyViewController.nib -> ../MyFramework.framework/Resources/MyViewController.nib\n#\ndef build_embedded_framework(project):\nfw_path = project.local_built_fw_path\nembedded_path = project.local_built_embedded_fw_path\nfw_name = os.environ['WRAPPER_NAME']\n\nif (os.path.islink(fw_path)):\n# If the framework path is a link, the build result already in embeddedframework.\n# Just recreate embeddedframework's Resources\nremove_path(os.path.join(embedded_path, \"Resources\"))\nelse:\nremove_path(embedded_path)\nensure_path_exists(embedded_path)\ncopy_overwrite(fw_path, os.path.join(embedded_path, fw_name))\n\n# Create embeddedframework's Resources\nensure_path_exists(os.path.join(embedded_path, \"Resources\"))\nsymlink_source = os.path.join(\"..\", fw_name, \"Resources\")\nsymlink_path = os.path.join(embedded_path, \"Resources\")\nif os.path.isdir(os.path.join(fw_path, \"Resources\")):\nfor file in filter(lambda x: x != \"Info.plist\" and not x.endswith(\".lproj\"), os.listdir(os.path.join(fw_path, \"Resources\"))):\nattempt_symlink(os.path.join(symlink_path, file), os.path.join(symlink_source, file))\n\n# Remove the normal framework and replace it with a symlink to the copy\n# in the embedded framework. This is needed because Xcode runs its strip\n# phase AFTER the script runs.\nembed_fw_wrapper = os.path.splitext(os.environ['WRAPPER_NAME'])[0] + \".embeddedframework\"\nremove_path(fw_path)\nattempt_symlink(fw_path, os.path.join(embed_fw_wrapper, os.environ['WRAPPER_NAME']))\n\n\n# Run the build process in slave mode to build the other configuration\n# (device/simulator).\n#\ndef run_slave_build(project):\nprint_and_call_slave_build(project.get_slave_project_build_command(), project.other_platform)\n\n# Run the build process.\n#\ndef run_build():\nproject = Project(os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\"))\n\n# Issue warnings only if we're master.\nif is_master():\nif len(project.compilable_sources) == 0:\nraise Exception(\"No compilable sources found. Please add at least one source file to build target %s.\" % os.environ['TARGET_NAME'])\n\nif config_warn_derived_data:\ncheck_for_derived_data_in_search_paths(project)\nif config_warn_no_public_headers and len(project.public_headers) == 0:\nissue_warning('No headers in build target %s were marked public. Please move at least one header to \"Public\" in the \"Copy Headers\" build phase.' % os.environ['TARGET_NAME'])\n\n# Only build slave if this is an archive build.\nif is_archive_build():\nif is_master():\nlog.debug(\"Building as MASTER\")\n# The slave-side linker tries to include this (nonexistent) path as\n# a library path.\nensure_path_exists(project.get_slave_environment()['BUILT_PRODUCTS_DIR'])\nproject.build_state.persist()\nrun_slave_build(project)\nproject.build_state.reload()\nelse:\nlog.debug(\"Building as SLAVE\")\nproject.build_state.reload()\nproject.build_state.set_slave_properties(project.local_architectures,\nproject.local_linked_archive_paths,\nproject.local_built_fw_path,\nproject.local_built_embedded_fw_path)\nproject.build_state.persist()\n\nlink_local_archs(project)\n\n# Only do a universal binary when building an archive.\nif is_archive_build() and is_master():\nlink_combine_all_archs(project)\nelse:\nlink_combine_local_archs(project)\n\nif config_deep_header_hierarchy:\nbuild_deep_header_hierarchy(project)\n\nadd_symlinks_to_framework(project)\n\nif is_master():\nif config_framework_type == 'embeddedframework':\nbuild_embedded_framework(project)\nelif config_framework_type != 'framework':\nraise Exception(\"%s: Unknown framework type for config_framework_type\" % config_framework_type)\n\n\nif __name__ == \"__main__\":\nlog_handler = logging.StreamHandler()\nlog_handler.setFormatter(logging.Formatter(\"%(name)s (\" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\nlog.addHandler(log_handler)\nlog.setLevel(config_log_level)\n\nerror_code = 0\nprefix = \"M\" if is_master() else \"S\"\nlog_handler.setFormatter(logging.Formatter(\"%(name)s (\" + prefix + \" \" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n\nlog.debug(\"Begin build process\")\n\nif config_deep_header_top:\nconfig_deep_header_top = string.Template(config_deep_header_top).substitute(os.environ)\n\ntry:\nrun_build()\nif issued_warnings:\nif config_fail_on_warnings:\nerror_code = 1\nlog.warn(\"Build completed with warnings\")\nelse:\nlog.info(\"Build completed\")\nif not is_archive_build():\nlog.info(\"Note: This is *NOT* a universal framework build. To build as a universal framework, do an archive build.\")\nlog.info(\"To do an archive build from command line, use \\\"xcodebuild -configuration Release UFW_ACTION=archive clean build\\\"\")\nexcept Exception:\ntraceback.print_exc(file=sys.stdout)\nerror_code = 1\nlog.error(\"Build failed\")\nfinally:\nif error_code == 0 and is_archive_build() and is_master():\nlog.info(\"Built framework is in \" + os.environ['TARGET_BUILD_DIR'])\nif should_open_build_dir():\nopen_build_dir()\nsys.exit(error_code)\n";
		};
		6872039E187F4FD800562041 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /usr/bin/python;
			shellScript = "# TAG: BUILD SCRIPT (do not remove this comment)\n# Build script generated using https://github.com/kstenerud/iOS-Universal-Framework Mk 8 (beta 2012-06-16)\nimport logging\n\n\n##############################################################################\n#\n# Configuration\n#\n##############################################################################\n\n# Select which kind of framework to build.\n#\n# Note: Due to issues with Xcode's build process, if you select\n#       'embeddedframework', it will still show the regular framework\n#       (as a symlink) along side of the embedded framework. Be sure to\n#       instruct your users to copy/move the embedded framework in this case!\n#\n# If your framework contains resources such as images, nibs, momds, plists,\n# zipfiles and such, choose 'embeddedframework'.\n#\n# If your framework contains no resources, choose 'framework'.\n#\nconfig_framework_type = 'framework'\n#config_framework_type = 'embeddedframework'\n\n# Open the build directory in Finder when the universal framework is\n# successfully built.\n#\n# This value can be overridden by setting the UFW_OPEN_BUILD_DIR env variable\n# to True or False.\n#\n# Recommended setting: True\n#\nconfig_open_build_dir = True\n\n# If true, ensures that all public headers are stored in the framework under\n# the same directory hierarchy as they were in the source tree.\n#\n# Xcode by default places all headers at the same top level, but every other\n# build tool in the known universe preserves directory structure. For simple\n# libraries it doesn't really matter much, but for ports of existing software\n# packages or for bigger libraries, it makes sense to have more structure.\n#\n# The default is set to \"False\" since that's what most Xcode users are used to.\n#\n# Recommended setting: True for deep hierarchy projects, False otherwise.\n#\nconfig_deep_header_hierarchy = False\n\n# Specify where the top of the public header hierarchy is. This path is\n# relative to the project's dir (PROJECT_DIR). You can reference environment\n# variables using templating syntax (e.g. \"${TARGET_NAME}/Some/Subdir\")\n#\n# NOTE: Only used if config_deep_header_hierarchy is True.\n#\n# If this is set to None, the script will attempt to figure out for itself\n# where the top of the header hierarchy is by looking for common path prefixes\n# in the public header files. This process can fail if:\n# - You only have one public header file.\n# - Your source header files don't all have a common root.\n#\n# A common approach is to use \"${TARGET_NAME}\", working under the assumption\n# that all of your header files share the common root of a directory under\n# your project with the same name as your target (which is the Xcode default).\n#\n# Recommended setting: \"${TARGET_NAME}\"\n#\nconfig_deep_header_top = \"${TARGET_NAME}\"\n\n# Warn when \"DerivedData\" is detected in any of the header, library, or\n# framework search paths. In almost all cases, references to directories under\n# DerivedData are added as a result of an Xcode bug and must be manually\n# removed.\n#\n# Recommended setting: True\n#\nconfig_warn_derived_data = True\n\n# Warn if no headers were marked public in this framework.\n#\n# Recommended setting: True\n#\nconfig_warn_no_public_headers = True\n\n# Cause the build to fail if any warnings are issued.\n#\n# Recommended setting: True\n#\nconfig_fail_on_warnings = True\n\n# Minimum log level\n#\n# Recommended setting: logging.INFO\n#\nconfig_log_level = logging.INFO\n\n\n##############################################################################\n#\n# Don't touch anything below here unless you know what you're doing.\n#\n##############################################################################\n\nimport collections\nimport json\nimport os\nimport re\nimport shlex\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport time\nimport traceback\n\n\n##############################################################################\n#\n# Globals\n#\n##############################################################################\n\nlog = logging.getLogger('UFW')\n\nissued_warnings = False\n\n\n##############################################################################\n#\n# Classes\n#\n##############################################################################\n\n# Allows the slave build to communicate with the master build.\n#\nclass BuildState:\n\n    def __init__(self):\n        self.reload()\n\n    def reset(self):\n        self.slave_platform = None\n        self.slave_architectures = []\n        self.slave_linked_archive_paths = []\n        self.slave_built_fw_path = None\n        self.slave_built_embedded_fw_path = None\n\n    def set_slave_properties(self, architectures,\n                             linked_archive_paths,\n                             built_fw_path,\n                             built_embedded_fw_path):\n        self.slave_platform = os.environ['PLATFORM_NAME']\n        self.slave_architectures = architectures\n        self.slave_linked_archive_paths = linked_archive_paths\n        self.slave_built_fw_path = built_fw_path\n        self.slave_built_embedded_fw_path = built_embedded_fw_path\n\n    def get_save_path(self):\n        return os.path.join(os.environ['PROJECT_TEMP_DIR'], \"ufw_build_state.json\")\n\n    def persist(self):\n        filename = self.get_save_path()\n        parent = os.path.dirname(filename)\n        if not os.path.isdir(parent):\n            os.makedirs(parent)\n        with open(filename, \"w\") as f:\n            f.write(json.dumps(self.__dict__))\n\n    def reload(self):\n        self.reset()\n        filename = self.get_save_path()\n        if os.path.exists(filename):\n            with open(filename, \"r\") as f:\n                new_dict = json.loads(f.read())\n                if new_dict is not None:\n                    self.__dict__ = dict(self.__dict__.items() + new_dict.items())\n\n\n# Holds information about the current project and build environment.\n#\nclass Project:\n\n    def __init__(self, filename):\n        sourcecode_types = ['sourcecode.c.c',\n                            'sourcecode.c.objc',\n                            'sourcecode.cpp.cpp',\n                            'sourcecode.cpp.objcpp',\n                            'sourcecode.asm.asm',\n                            'sourcecode.asm.llvm',\n                            'sourcecode.nasm']\n\n        self.build_state = BuildState()\n        self.project_data = self.load_from_file(filename)\n        self.target = filter(lambda x: x['name'] == os.environ['TARGET_NAME'], self.project_data['targets'])[0]\n        self.public_headers = self.get_build_phase_files('PBXHeadersBuildPhase', lambda x: x.get('settings', False) and x['settings'].get('ATTRIBUTES', False) and 'Public' in x['settings']['ATTRIBUTES'])\n        self.static_libraries = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'archive.ar' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.static_frameworks = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'wrapper.framework' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.compilable_sources = self.get_build_phase_files('PBXSourcesBuildPhase', lambda x: x['fileRef']['fileType'] in sourcecode_types)\n        self.header_paths = [os.path.join(*x['pathComponents']) for x in self.public_headers]\n\n        self.headers_dir = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['CONTENTS_FOLDER_PATH'], 'Headers')\n        self.libtool_path = os.path.join(os.environ['DT_TOOLCHAIN_DIR'], 'usr', 'bin', 'libtool')\n        self.project_filename = os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\")\n        self.local_exe_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])\n        self.local_architectures = os.environ['ARCHS'].split(' ')\n        self.local_built_fw_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['WRAPPER_NAME'])\n        self.local_built_embedded_fw_path = os.path.splitext(self.local_built_fw_path)[0] + \".embeddedframework\"\n        self.local_linked_archive_paths = [self.get_linked_ufw_archive_path(arch) for arch in self.local_architectures]\n        self.local_platform = os.environ['PLATFORM_NAME']\n        other_platforms = os.environ['SUPPORTED_PLATFORMS'].split(' ')\n        other_platforms.remove(self.local_platform)\n        self.other_platform = other_platforms[0]\n\n        sdk_name = os.environ['SDK_NAME']\n        if not sdk_name.startswith(self.local_platform):\n            raise Exception(\"%s didn't start with %s\" % (sdk_name, self.local_platform))\n        self.sdk_version = sdk_name[len(self.local_platform):]\n\n    # Load an Xcode project file.\n    #\n    def load_from_file(self, filename):\n        project_file = json.loads(subprocess.check_output([\"plutil\", \"-convert\", \"json\", \"-o\", \"-\", filename]))\n        all_objects = project_file['objects']\n        del project_file['objects']\n        for obj in all_objects.values():\n            self.fix_keys(obj)\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, project_file))\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, all_objects.values()))\n        project_data = project_file['rootObject']\n        self.build_full_paths(project_data, splitpath(os.environ['SOURCE_ROOT']))\n        return project_data\n\n    def is_key(self, obj):        \n        return isinstance(obj, basestring) and len(obj) == 24 and re.search('^[0-9a-fA-F]+$', obj) is not None\n    \n    def build_dereference_list(self, all_objects, parent, key, obj):\n        deref_list = []\n        if self.is_key(obj):\n            dereferenced = all_objects.get(obj, obj)\n            if dereferenced is not obj:\n                deref_list.append((parent, key, obj, dereferenced))\n        elif isinstance(obj, collections.Mapping):\n            for k, v in obj.iteritems():\n                deref_list += self.build_dereference_list(all_objects, obj, k, v)\n        elif isinstance(obj, collections.Iterable) and not isinstance(obj, basestring):\n            for item in obj:\n                deref_list += self.build_dereference_list(all_objects, obj, None, item)\n        return deref_list\n    \n    def unpack_objects(self, deref_list):\n        for parent, key, orig, obj in deref_list:\n            if key is None:\n                parent.remove(orig)\n                parent.append(obj)\n            else:\n                parent[key] = obj\n\n    # Store the full path, separated into components, to a node inside the node\n    # as \"pathComponents\". Also recurse into that node if it's a group.\n    #\n    def build_full_paths(self, node, base_path):\n        # Some nodes are relative to a different source tree, specified as an\n        # env variable.\n        if node.get('sourceTree', '<group>') != '<group>':\n            new_base_path = os.environ.get(node['sourceTree'], None)\n            if new_base_path:\n                base_path = splitpath(new_base_path)\n        # Add the current node's path, if any.\n        if node.get('path', False):\n            base_path = base_path + splitpath(node['path'])\n        node['pathComponents'] = base_path\n        # Recurse if this is a group.\n        if node['isa'] == 'PBXGroup':\n            for child in node['children']:\n                self.build_full_paths(child, base_path)\n        elif node['isa'] == 'PBXProject':\n            self.build_full_paths(node['mainGroup'], base_path)\n            self.build_full_paths(node['productRefGroup'], base_path)\n            for child in node['targets']:\n                self.build_full_paths(child, base_path)\n            projectRefs = node.get('projectReferences', None)\n            if projectRefs is not None:\n                for child in projectRefs[0].values():\n                    self.build_full_paths(child, base_path)\n\n    # Fix up any inconvenient keys.\n    #\n    def fix_keys(self, obj):\n        key_remappings = {'lastKnownFileType': 'fileType', 'explicitFileType': 'fileType'}\n        for key in list(set(key_remappings.keys()) & set(obj.keys())):\n            obj[key_remappings[key]] = obj[key]\n            del obj[key]\n\n    # Get the files from a build phase.\n    #\n    def get_build_phase_files(self, build_phase_name, filter_func):\n        build_phase = filter(lambda x: x['isa'] == build_phase_name, self.target['buildPhases'])[0]\n        build_files = filter(filter_func, build_phase['files'])\n        return [x['fileRef'] for x in build_files]\n\n    # Get the truncated paths of all headers that start with the specified\n    # relative path. Paths are read and returned as fully separated lists.\n    # e.g. ['Some', 'Path', 'To', 'A', 'Header'] with relative_path of\n    # ['Some', 'Path'] gets truncated to ['To', 'A', 'Header']\n    #\n    def movable_headers_relative_to(self, relative_path):\n        rel_path_length = len(relative_path)\n        result = filter(lambda path: len(path) >= rel_path_length and\n                                     path[:rel_path_length] == relative_path, self.header_paths)\n        return [path[rel_path_length:] for path in result]\n\n    # Get the full path to where a linkable archive (library or framework)\n    # is supposed to be.\n    #\n    def get_linked_archive_path(self, architecture):\n        return os.path.join(os.environ['OBJECT_FILE_DIR_%s' % os.environ['CURRENT_VARIANT']],\n                            architecture,\n                            os.environ['EXECUTABLE_NAME'])\n\n    # Get the full path to our custom linked archive of the project.\n    #\n    def get_linked_ufw_archive_path(self, architecture):\n        return self.get_linked_archive_path(architecture) + \".ufwbuild\"\n\n    # Get the full path to the executable of an archive.\n    #\n    def get_exe_path(self, node):\n        path = os.path.join(*node['pathComponents'])\n        if node['fileType'] == 'wrapper.framework':\n            # Frameworks are directories, so go one deeper\n            path = os.path.join(path, os.path.splitext(node['pathComponents'][-1])[0])\n        return path\n\n    # Get the path to the directory containing the archive.\n    #\n    def get_containing_path(self, node):\n        return os.path.join(*node['pathComponents'])\n    \n    def get_archive_search_paths(self):\n        log.info(\"Search paths = %s\" % set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries]))\n        return set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries])\n\n    # Command to link all objects of a single architecture.\n    #\n    def get_single_arch_link_command(self, architecture):\n        cmd = [self.libtool_path,\n               \"-static\",\n               \"-arch_only\", architecture,\n               \"-syslibroot\", os.environ['SDKROOT'],\n               \"-L%s\" % os.environ['TARGET_BUILD_DIR'],\n               \"-filelist\", os.environ['LINK_FILE_LIST_%s_%s' % (os.environ['CURRENT_VARIANT'], architecture)]]\n        if os.environ.get('OTHER_LDFLAGS', False):\n            cmd += [os.environ['OTHER_LDFLAGS']]\n        if os.environ.get('WARNING_LDFLAGS', False):\n            cmd += [os.environ['WARNING_LDFLAGS']]\n#        cmd += [\"-L%s\" % libpath for libpath in self.get_archive_search_paths()]\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", self.get_linked_ufw_archive_path(architecture)]\n        return cmd\n\n    # Command to link all local architectures for the current configuration\n    # into an archive. This reads all libraries + the UFW-built archives and\n    # overwrites the final product.\n    #\n    def get_local_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Command to link all architectures into a universal archive.\n    # This reads all UFW-built archives and overwrites the final product.\n    #\n    def get_all_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths + self.build_state.slave_linked_archive_paths\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Build up an environment for the slave process. This uses BUILD_ROOT\n    # and TEMP_ROOT to convert all environment variables to values suitable\n    # for the slave build environment so that xcodebuild doesn't try to build\n    # in the project directory under \"build\".\n    #\n    def get_slave_environment(self):\n        ignored = ['LD_MAP_FILE_PATH',\n        'HEADER_SEARCH_PATHS',\n        'LIBRARY_SEARCH_PATHS',\n        'FRAMEWORK_SEARCH_PATHS']\n        build_root = os.environ['BUILD_ROOT']\n        temp_root = os.environ['TEMP_ROOT']\n        newenv = {}\n        for key, value in os.environ.items():\n            if key not in ignored and not key.startswith('LINK_FILE_LIST_') and not key.startswith('LD_DEPENDENCY_'):\n                if build_root in value or temp_root in value:\n                    newenv[key] = value.replace(self.local_platform, self.other_platform)\n        return newenv\n\n    # Command to invoke xcodebuild on the slave platform.\n    #\n    def get_slave_project_build_command(self):\n        cmd = [\"xcodebuild\",\n               \"-project\",\n               os.environ['PROJECT_FILE_PATH'],\n               \"-target\",\n               os.environ['TARGET_NAME'],\n               \"-configuration\",\n               os.environ['CONFIGURATION'],\n               \"-sdk\",\n               self.other_platform + self.sdk_version]\n        cmd += [\"%s=%s\" % (key, value) for key, value in self.get_slave_environment().items()]\n        cmd += [\"UFW_MASTER_PLATFORM=\" + os.environ['PLATFORM_NAME']]\n        cmd += [os.environ['ACTION']]\n        return cmd\n\n\n\n##############################################################################\n#\n# Utility Functions\n#\n##############################################################################\n\n# Split a path into a list of path components.\n#\ndef splitpath(path, maxdepth=20):\n     (head, tail) = os.path.split(path)\n     return splitpath(head, maxdepth - 1) + [tail] if maxdepth and head and head != path else [ head or tail ]\n\n# Remove all subdirectories under a path.\n#\ndef remove_subdirs(path, ignore_files):\n    if os.path.exists(path):\n        for filename in filter(lambda x: x not in ignore_files, os.listdir(path)):\n            fullpath = os.path.join(path, filename)\n            if os.path.isdir(fullpath):\n                log.info(\"Remove %s\" % fullpath)\n                shutil.rmtree(fullpath)\n\n# Make whatever parent paths are necessary for a path to exist.\n#\ndef ensure_path_exists(path):\n    if not os.path.isdir(path):\n        os.makedirs(path)\n\n# Make whatever parent paths are necessary for a path's parent to exist.\n#\ndef ensure_parent_exists(path):\n    parent = os.path.dirname(path)\n    if not os.path.isdir(parent):\n        os.makedirs(parent)\n\n# Remove a file or dir if it exists.\n#\ndef remove_path(path):\n    if os.path.exists(path):\n        if os.path.isdir(path) and not os.path.islink(path):\n            shutil.rmtree(path)\n        else:\n            os.remove(path)\n\n# Move a file or dir, replacing the destination if it exists.\n#\ndef move_file(src, dst):\n    if src == dst or not os.path.isfile(src):\n        return\n    log.info(\"Move %s to %s\" % (src, dst))\n    ensure_parent_exists(dst)\n    remove_path(dst)\n    shutil.move(src, dst)\n\n# Copy a file or dir, replacing the destination if it exists already.\n#\ndef copy_overwrite(src, dst):\n    if src != dst:\n        remove_path(dst)\n        ensure_parent_exists(dst)\n        shutil.copytree(src, dst, symlinks=True)\n\n# Attempt to symlink link_path -> link_to.\n# link_to must be a path relative to link_path's parent and must exist.\n# If link_path already exists, do nothing.\n#\ndef attempt_symlink(link_path, link_to):\n    # Only allow linking to an existing file\n    os.stat(os.path.abspath(os.path.join(link_path, \"..\", link_to)))\n\n    # Only make the link if it hasn't already been made\n    if not os.path.exists(link_path):\n        log.info(\"Symlink %s -> %s\" % (link_path, link_to))\n        os.symlink(link_to, link_path)\n\n# Takes the last entry in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef top_level_file_path(base_path, path_list):\n    return os.path.join(base_path, os.path.split(path_list[-1])[-1])\n\n# Takes all entries in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef full_file_path(base_path, path_list):\n    return os.path.join(*([base_path] + path_list))\n\n# Print a command before executing it.\n# Also print out all output from the command to STDOUT.\n#\ndef print_and_call(cmd):\n    log.info(\"Cmd \" + \" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0]\n    if len(result) > 0:\n        log.info(result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Special print-and-call command for the slave build that strips out\n# xcodebuild's spammy list of environment variables.\n#\ndef print_and_call_slave_build(cmd, other_platform):\n    separator = '=== BUILD NATIVE TARGET '\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0].split(separator)\n    if len(result) == 1:\n        result = result[0]\n    else:\n        result = separator + result[1]\n    log.info(\"Cmd \" + \" \".join(cmd) + \"\\n\" + result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Issue a warning and record that a warning has been issued.\n#\ndef issue_warning(msg, *args, **kwargs):\n    global issued_warnings\n    issued_warnings = True\n    log.warn(msg, *args, **kwargs)\n\n\n\n##############################################################################\n#\n# Main Application\n#\n##############################################################################\n\n# Check if we are running as master.\n#\ndef is_master():\n    return os.environ.get('UFW_MASTER_PLATFORM', os.environ['PLATFORM_NAME']) == os.environ['PLATFORM_NAME']\n\n# DerivedData should almost never appear in any framework, library, or header\n# search paths. However, Xcode will sometimes add them in, so we check to make\n# sure.\n#\ndef check_for_derived_data_in_search_paths(project):\n    search_path_keys = [\"FRAMEWORK_SEARCH_PATHS\", \"LIBRARY_SEARCH_PATHS\", \"HEADER_SEARCH_PATHS\"]\n    build_configs = project.target['buildConfigurationList']['buildConfigurations']\n    build_settings = filter(lambda x: x['name'] == os.environ['CONFIGURATION'], build_configs)[0]['buildSettings']\n    \n    found_something = False\n    for path_key in filter(lambda x: x in build_settings, search_path_keys):\n        path = build_settings[path_key]\n        if \"DerivedData\" in path:\n            found_something = True\n            log.warn(\"Derived data in %s\" % path)\n            issue_warning(\"'%s' contains reference to 'DerivedData'.\" % path_key)\n    if found_something:\n        log.warn(\"Check your build settings and remove any entries that contain paths inside the DerivedData folder.\")\n        log.warn(\"Otherwise you can disable this warning by changing 'config_warn_derived_data' in this script.\")\n\n# Link local architectures into their respective archives.\n#\ndef link_local_archs(project):\n    for arch in project.local_architectures:\n        print_and_call(project.get_single_arch_link_command(arch))\n\n# Link only the local architectures into the final product, not the slave\n# architectures. For iphoneos, this will be armv6, armv7. For simulator, this\n# will be i386.\n#\ndef link_combine_local_archs(project):\n    print_and_call(project.get_local_archs_link_command())\n\n# Link all architectures into the final product.\n#\ndef link_combine_all_archs(project):\n    print_and_call(project.get_all_archs_link_command())\n\n# Check if we should open the build directory after a successful build.\n#\ndef should_open_build_dir():\n    env_setting = os.environ.get('UFW_OPEN_BUILD_DIR', None)\n    if env_setting is not None:\n        return env_setting\n\n    return config_open_build_dir\n\n# Open the build dir in Finder.\n#\ndef open_build_dir():\n    print_and_call(['open', os.environ['TARGET_BUILD_DIR']])\n\n# Check if the build was started by selecting \"Archive\" under \"Product\" in\n# Xcode.\n#\ndef is_archive_build():\n    # ACTION is always 'build', but perhaps Apple will fix this someday?\n    archive_build = os.environ['ACTION'] == 'archive'\n\n    if not archive_build:\n        # This can be passed in as an env variable when building from command line.\n        archive_build = os.environ.get('UFW_ACTION', None) == 'archive'\n\n    build_dir = splitpath(os.environ['BUILD_DIR'])\n    if not archive_build:\n        # This partial path is used when you select \"archive\" from within Xcode.\n        archive_build = 'ArchiveIntermediates' in build_dir\n\n    # It only counts as a full archive build if this target is being built into\n    # its own build dir (not being built as a dependency of another target)\n    if archive_build:\n        archive_build = os.environ['TARGET_NAME'] in build_dir\n    \n    return archive_build\n\n# Xcode by default throws all public headers into the top level directory.\n# This function moves them to their expected deep hierarchy.\n#\ndef build_deep_header_hierarchy(project):\n    header_path_top = config_deep_header_top\n    if not header_path_top:\n        header_path_top = os.path.commonprefix(project.header_paths)\n    else:\n        header_path_top = splitpath(header_path_top)\n\n    built_headers_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['PUBLIC_HEADERS_FOLDER_PATH'])\n    movable_headers = project.movable_headers_relative_to(header_path_top)\n\n    # Remove subdirs if they only contain files that have been rebuilt\n    ignore_headers = filter(lambda x: not os.path.isfile(top_level_file_path(built_headers_path, x)), movable_headers)\n    remove_subdirs(built_headers_path, [file[0] for file in ignore_headers])\n\n    # Move rebuilt headers into their proper subdirs\n    for header in movable_headers:\n        move_file(top_level_file_path(built_headers_path, header), full_file_path(built_headers_path, header))\n\n# Add all symlinks needed to make a full framework structure:\n#\n# MyFramework.framework\n# |-- MyFramework -> Versions/Current/MyFramework\n# |-- Headers -> Versions/Current/Headers\n# |-- Resources -> Versions/Current/Resources\n# `-- Versions\n#     |-- A\n#     |   |-- MyFramework\n#     |   |-- Headers\n#     |   |   `-- MyFramework.h\n#     |   `-- Resources\n#     |       |-- Info.plist\n#     |       |-- MyViewController.nib\n#     |       `-- en.lproj\n#     |           `-- InfoPlist.strings\n#     `-- Current -> A\n#\ndef add_symlinks_to_framework(project):\n    base_dir = project.local_built_fw_path\n    attempt_symlink(os.path.join(base_dir, \"Versions\", \"Current\"), os.environ['FRAMEWORK_VERSION'])\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Headers\")):\n        attempt_symlink(os.path.join(base_dir, \"Headers\"), os.path.join(\"Versions\", \"Current\", \"Headers\"))\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Resources\")):\n        attempt_symlink(os.path.join(base_dir, \"Resources\"), os.path.join(\"Versions\", \"Current\", \"Resources\"))\n    attempt_symlink(os.path.join(base_dir, os.environ['EXECUTABLE_NAME']), os.path.join(\"Versions\", \"Current\", os.environ['EXECUTABLE_NAME']))\n\n# Build an embedded framework structure.\n# An embedded framework contains the actual framework, plus a \"Resources\"\n# directory containing symlinks to all resources found in the actual framework,\n# with the exception of \"Info.plist\" and anything ending in \".lproj\":\n#\n# MyFramework.embeddedframework\n# |-- MyFramework.framework\n# |   |-- MyFramework -> Versions/Current/MyFramework\n# |   |-- Headers -> Versions/Current/Headers\n# |   |-- Resources -> Versions/Current/Resources\n# |   `-- Versions\n# |       |-- A\n# |       |   |-- MyFramework\n# |       |   |-- Headers\n# |       |   |   `-- MyFramework.h\n# |       |   `-- Resources\n# |       |       |-- Info.plist\n# |       |       |-- MyViewController.nib\n# |       |       `-- en.lproj\n# |       |           `-- InfoPlist.strings\n# |       `-- Current -> A\n# `-- Resources\n#     `-- MyViewController.nib -> ../MyFramework.framework/Resources/MyViewController.nib\n#\ndef build_embedded_framework(project):\n    fw_path = project.local_built_fw_path\n    embedded_path = project.local_built_embedded_fw_path\n    fw_name = os.environ['WRAPPER_NAME']\n\n    if (os.path.islink(fw_path)):\n        # If the framework path is a link, the build result already in embeddedframework.\n        # Just recreate embeddedframework's Resources\n        remove_path(os.path.join(embedded_path, \"Resources\"))\n    else:\n        remove_path(embedded_path)\n        ensure_path_exists(embedded_path)\n        copy_overwrite(fw_path, os.path.join(embedded_path, fw_name))\n\n    # Create embeddedframework's Resources        \n    ensure_path_exists(os.path.join(embedded_path, \"Resources\"))\n    symlink_source = os.path.join(\"..\", fw_name, \"Resources\")\n    symlink_path = os.path.join(embedded_path, \"Resources\")\n    if os.path.isdir(os.path.join(fw_path, \"Resources\")):\n        for file in filter(lambda x: x != \"Info.plist\" and not x.endswith(\".lproj\"), os.listdir(os.path.join(fw_path, \"Resources\"))):\n            attempt_symlink(os.path.join(symlink_path, file), os.path.join(symlink_source, file))\n\n    # Remove the normal framework and replace it with a symlink to the copy\n    # in the embedded framework. This is needed because Xcode runs its strip\n    # phase AFTER the script runs.\n    embed_fw_wrapper = os.path.splitext(os.environ['WRAPPER_NAME'])[0] + \".embeddedframework\"\n    remove_path(fw_path)\n    attempt_symlink(fw_path, os.path.join(embed_fw_wrapper, os.environ['WRAPPER_NAME']))\n\n\n# Run the build process in slave mode to build the other configuration\n# (device/simulator).\n#\ndef run_slave_build(project):\n    print_and_call_slave_build(project.get_slave_project_build_command(), project.other_platform)\n\n# Run the build process.\n#\ndef run_build():\n    project = Project(os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\"))\n\n    # Issue warnings only if we're master.\n    if is_master():\n        if len(project.compilable_sources) == 0:\n            raise Exception(\"No compilable sources found. Please add at least one source file to build target %s.\" % os.environ['TARGET_NAME'])\n\n        if config_warn_derived_data:\n            check_for_derived_data_in_search_paths(project)\n        if config_warn_no_public_headers and len(project.public_headers) == 0:\n            issue_warning('No headers in build target %s were marked public. Please move at least one header to \"Public\" in the \"Copy Headers\" build phase.' % os.environ['TARGET_NAME'])\n\n    # Only build slave if this is an archive build.\n    if is_archive_build():\n        if is_master():\n            log.debug(\"Building as MASTER\")\n            # The slave-side linker tries to include this (nonexistent) path as\n            # a library path.\n            ensure_path_exists(project.get_slave_environment()['BUILT_PRODUCTS_DIR'])\n            project.build_state.persist()\n            run_slave_build(project)\n            project.build_state.reload()\n        else:\n            log.debug(\"Building as SLAVE\")\n            project.build_state.reload()\n            project.build_state.set_slave_properties(project.local_architectures,\n                                                     project.local_linked_archive_paths,\n                                                     project.local_built_fw_path,\n                                                     project.local_built_embedded_fw_path)\n            project.build_state.persist()\n\n    link_local_archs(project)\n    \n    # Only do a universal binary when building an archive.\n    if is_archive_build() and is_master():\n        link_combine_all_archs(project)\n    else:\n        link_combine_local_archs(project)\n\n    if config_deep_header_hierarchy:\n        build_deep_header_hierarchy(project)\n\n    add_symlinks_to_framework(project)\n    \n    if is_master():\n        if config_framework_type == 'embeddedframework':\n            build_embedded_framework(project)\n        elif config_framework_type != 'framework':\n            raise Exception(\"%s: Unknown framework type for config_framework_type\" % config_framework_type)\n\n\nif __name__ == \"__main__\":\n    log_handler = logging.StreamHandler()\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n    log.addHandler(log_handler)\n    log.setLevel(config_log_level)\n\n    error_code = 0\n    prefix = \"M\" if is_master() else \"S\"\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + prefix + \" \" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n\n    log.debug(\"Begin build process\")\n\n    if config_deep_header_top:\n        config_deep_header_top = string.Template(config_deep_header_top).substitute(os.environ)\n\n    try:\n        run_build()\n        if issued_warnings:\n            if config_fail_on_warnings:\n                error_code = 1\n            log.warn(\"Build completed with warnings\")\n        else:\n            log.info(\"Build completed\")\n        if not is_archive_build():\n            log.info(\"Note: This is *NOT* a universal framework build. To build as a universal framework, do an archive build.\")\n            log.info(\"To do an archive build from command line, use \\\"xcodebuild -configuration Release UFW_ACTION=archive clean build\\\"\")\n    except Exception:\n        traceback.print_exc(file=sys.stdout)\n        error_code = 1\n        log.error(\"Build failed\")\n    finally:\n        if error_code == 0 and is_archive_build() and is_master():\n            log.info(\"Built framework is in \" + os.environ['TARGET_BUILD_DIR'])\n            if should_open_build_dir():\n                open_build_dir()\n        sys.exit(error_code)\n";
		};
		687203C8187F4FEF00562041 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /usr/bin/python;
			shellScript = "# TAG: BUILD SCRIPT (do not remove this comment)\n# Build script generated using https://github.com/kstenerud/iOS-Universal-Framework Mk 8 (beta 2012-06-16)\nimport logging\n\n\n##############################################################################\n#\n# Configuration\n#\n##############################################################################\n\n# Select which kind of framework to build.\n#\n# Note: Due to issues with Xcode's build process, if you select\n#       'embeddedframework', it will still show the regular framework\n#       (as a symlink) along side of the embedded framework. Be sure to\n#       instruct your users to copy/move the embedded framework in this case!\n#\n# If your framework contains resources such as images, nibs, momds, plists,\n# zipfiles and such, choose 'embeddedframework'.\n#\n# If your framework contains no resources, choose 'framework'.\n#\nconfig_framework_type = 'framework'\n#config_framework_type = 'embeddedframework'\n\n# Open the build directory in Finder when the universal framework is\n# successfully built.\n#\n# This value can be overridden by setting the UFW_OPEN_BUILD_DIR env variable\n# to True or False.\n#\n# Recommended setting: True\n#\nconfig_open_build_dir = True\n\n# If true, ensures that all public headers are stored in the framework under\n# the same directory hierarchy as they were in the source tree.\n#\n# Xcode by default places all headers at the same top level, but every other\n# build tool in the known universe preserves directory structure. For simple\n# libraries it doesn't really matter much, but for ports of existing software\n# packages or for bigger libraries, it makes sense to have more structure.\n#\n# The default is set to \"False\" since that's what most Xcode users are used to.\n#\n# Recommended setting: True for deep hierarchy projects, False otherwise.\n#\nconfig_deep_header_hierarchy = False\n\n# Specify where the top of the public header hierarchy is. This path is\n# relative to the project's dir (PROJECT_DIR). You can reference environment\n# variables using templating syntax (e.g. \"${TARGET_NAME}/Some/Subdir\")\n#\n# NOTE: Only used if config_deep_header_hierarchy is True.\n#\n# If this is set to None, the script will attempt to figure out for itself\n# where the top of the header hierarchy is by looking for common path prefixes\n# in the public header files. This process can fail if:\n# - You only have one public header file.\n# - Your source header files don't all have a common root.\n#\n# A common approach is to use \"${TARGET_NAME}\", working under the assumption\n# that all of your header files share the common root of a directory under\n# your project with the same name as your target (which is the Xcode default).\n#\n# Recommended setting: \"${TARGET_NAME}\"\n#\nconfig_deep_header_top = \"${TARGET_NAME}\"\n\n# Warn when \"DerivedData\" is detected in any of the header, library, or\n# framework search paths. In almost all cases, references to directories under\n# DerivedData are added as a result of an Xcode bug and must be manually\n# removed.\n#\n# Recommended setting: True\n#\nconfig_warn_derived_data = True\n\n# Warn if no headers were marked public in this framework.\n#\n# Recommended setting: True\n#\nconfig_warn_no_public_headers = True\n\n# Cause the build to fail if any warnings are issued.\n#\n# Recommended setting: True\n#\nconfig_fail_on_warnings = True\n\n# Minimum log level\n#\n# Recommended setting: logging.INFO\n#\nconfig_log_level = logging.INFO\n\n\n##############################################################################\n#\n# Don't touch anything below here unless you know what you're doing.\n#\n##############################################################################\n\nimport collections\nimport json\nimport os\nimport re\nimport shlex\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport time\nimport traceback\n\n\n##############################################################################\n#\n# Globals\n#\n##############################################################################\n\nlog = logging.getLogger('UFW')\n\nissued_warnings = False\n\n\n##############################################################################\n#\n# Classes\n#\n##############################################################################\n\n# Allows the slave build to communicate with the master build.\n#\nclass BuildState:\n\ndef __init__(self):\nself.reload()\n\ndef reset(self):\nself.slave_platform = None\nself.slave_architectures = []\nself.slave_linked_archive_paths = []\nself.slave_built_fw_path = None\nself.slave_built_embedded_fw_path = None\n\ndef set_slave_properties(self, architectures,\nlinked_archive_paths,\nbuilt_fw_path,\nbuilt_embedded_fw_path):\nself.slave_platform = os.environ['PLATFORM_NAME']\nself.slave_architectures = architectures\nself.slave_linked_archive_paths = linked_archive_paths\nself.slave_built_fw_path = built_fw_path\nself.slave_built_embedded_fw_path = built_embedded_fw_path\n\ndef get_save_path(self):\nreturn os.path.join(os.environ['PROJECT_TEMP_DIR'], \"ufw_build_state.json\")\n\ndef persist(self):\nfilename = self.get_save_path()\nparent = os.path.dirname(filename)\nif not os.path.isdir(parent):\nos.makedirs(parent)\nwith open(filename, \"w\") as f:\nf.write(json.dumps(self.__dict__))\n\ndef reload(self):\nself.reset()\nfilename = self.get_save_path()\nif os.path.exists(filename):\nwith open(filename, \"r\") as f:\nnew_dict = json.loads(f.read())\nif new_dict is not None:\nself.__dict__ = dict(self.__dict__.items() + new_dict.items())\n\n\n# Holds information about the current project and build environment.\n#\nclass Project:\n\ndef __init__(self, filename):\nsourcecode_types = ['sourcecode.c.c',\n'sourcecode.c.objc',\n'sourcecode.cpp.cpp',\n'sourcecode.cpp.objcpp',\n'sourcecode.asm.asm',\n'sourcecode.asm.llvm',\n'sourcecode.nasm']\n\nself.build_state = BuildState()\nself.project_data = self.load_from_file(filename)\nself.target = filter(lambda x: x['name'] == os.environ['TARGET_NAME'], self.project_data['targets'])[0]\nself.public_headers = self.get_build_phase_files('PBXHeadersBuildPhase', lambda x: x.get('settings', False) and x['settings'].get('ATTRIBUTES', False) and 'Public' in x['settings']['ATTRIBUTES'])\nself.static_libraries = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'archive.ar' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\nself.static_frameworks = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'wrapper.framework' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\nself.compilable_sources = self.get_build_phase_files('PBXSourcesBuildPhase', lambda x: x['fileRef']['fileType'] in sourcecode_types)\nself.header_paths = [os.path.join(*x['pathComponents']) for x in self.public_headers]\n\nself.headers_dir = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['CONTENTS_FOLDER_PATH'], 'Headers')\nself.libtool_path = os.path.join(os.environ['DT_TOOLCHAIN_DIR'], 'usr', 'bin', 'libtool')\nself.project_filename = os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\")\nself.local_exe_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])\nself.local_architectures = os.environ['ARCHS'].split(' ')\nself.local_built_fw_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['WRAPPER_NAME'])\nself.local_built_embedded_fw_path = os.path.splitext(self.local_built_fw_path)[0] + \".embeddedframework\"\nself.local_linked_archive_paths = [self.get_linked_ufw_archive_path(arch) for arch in self.local_architectures]\nself.local_platform = os.environ['PLATFORM_NAME']\nother_platforms = os.environ['SUPPORTED_PLATFORMS'].split(' ')\nother_platforms.remove(self.local_platform)\nself.other_platform = other_platforms[0]\n\nsdk_name = os.environ['SDK_NAME']\nif not sdk_name.startswith(self.local_platform):\nraise Exception(\"%s didn't start with %s\" % (sdk_name, self.local_platform))\nself.sdk_version = sdk_name[len(self.local_platform):]\n\n# Load an Xcode project file.\n#\ndef load_from_file(self, filename):\nproject_file = json.loads(subprocess.check_output([\"plutil\", \"-convert\", \"json\", \"-o\", \"-\", filename]))\nall_objects = project_file['objects']\ndel project_file['objects']\nfor obj in all_objects.values():\nself.fix_keys(obj)\nself.unpack_objects(self.build_dereference_list(all_objects, None, None, project_file))\nself.unpack_objects(self.build_dereference_list(all_objects, None, None, all_objects.values()))\nproject_data = project_file['rootObject']\nself.build_full_paths(project_data, splitpath(os.environ['SOURCE_ROOT']))\nreturn project_data\n\ndef is_key(self, obj):\nreturn isinstance(obj, basestring) and len(obj) == 24 and re.search('^[0-9a-fA-F]+$', obj) is not None\n\ndef build_dereference_list(self, all_objects, parent, key, obj):\nderef_list = []\nif self.is_key(obj):\ndereferenced = all_objects.get(obj, obj)\nif dereferenced is not obj:\nderef_list.append((parent, key, obj, dereferenced))\nelif isinstance(obj, collections.Mapping):\nfor k, v in obj.iteritems():\nderef_list += self.build_dereference_list(all_objects, obj, k, v)\nelif isinstance(obj, collections.Iterable) and not isinstance(obj, basestring):\nfor item in obj:\nderef_list += self.build_dereference_list(all_objects, obj, None, item)\nreturn deref_list\n\ndef unpack_objects(self, deref_list):\nfor parent, key, orig, obj in deref_list:\nif key is None:\nparent.remove(orig)\nparent.append(obj)\nelse:\nparent[key] = obj\n\n# Store the full path, separated into components, to a node inside the node\n# as \"pathComponents\". Also recurse into that node if it's a group.\n#\ndef build_full_paths(self, node, base_path):\n# Some nodes are relative to a different source tree, specified as an\n# env variable.\nif node.get('sourceTree', '<group>') != '<group>':\nnew_base_path = os.environ.get(node['sourceTree'], None)\nif new_base_path:\nbase_path = splitpath(new_base_path)\n# Add the current node's path, if any.\nif node.get('path', False):\nbase_path = base_path + splitpath(node['path'])\nnode['pathComponents'] = base_path\n# Recurse if this is a group.\nif node['isa'] == 'PBXGroup':\nfor child in node['children']:\nself.build_full_paths(child, base_path)\nelif node['isa'] == 'PBXProject':\nself.build_full_paths(node['mainGroup'], base_path)\nself.build_full_paths(node['productRefGroup'], base_path)\nfor child in node['targets']:\nself.build_full_paths(child, base_path)\nprojectRefs = node.get('projectReferences', None)\nif projectRefs is not None:\nfor child in projectRefs[0].values():\nself.build_full_paths(child, base_path)\n\n# Fix up any inconvenient keys.\n#\ndef fix_keys(self, obj):\nkey_remappings = {'lastKnownFileType': 'fileType', 'explicitFileType': 'fileType'}\nfor key in list(set(key_remappings.keys()) & set(obj.keys())):\nobj[key_remappings[key]] = obj[key]\ndel obj[key]\n\n# Get the files from a build phase.\n#\ndef get_build_phase_files(self, build_phase_name, filter_func):\nbuild_phase = filter(lambda x: x['isa'] == build_phase_name, self.target['buildPhases'])[0]\nbuild_files = filter(filter_func, build_phase['files'])\nreturn [x['fileRef'] for x in build_files]\n\n# Get the truncated paths of all headers that start with the specified\n# relative path. Paths are read and returned as fully separated lists.\n# e.g. ['Some', 'Path', 'To', 'A', 'Header'] with relative_path of\n# ['Some', 'Path'] gets truncated to ['To', 'A', 'Header']\n#\ndef movable_headers_relative_to(self, relative_path):\nrel_path_length = len(relative_path)\nresult = filter(lambda path: len(path) >= rel_path_length and\npath[:rel_path_length] == relative_path, self.header_paths)\nreturn [path[rel_path_length:] for path in result]\n\n# Get the full path to where a linkable archive (library or framework)\n# is supposed to be.\n#\ndef get_linked_archive_path(self, architecture):\nreturn os.path.join(os.environ['OBJECT_FILE_DIR_%s' % os.environ['CURRENT_VARIANT']],\narchitecture,\nos.environ['EXECUTABLE_NAME'])\n\n# Get the full path to our custom linked archive of the project.\n#\ndef get_linked_ufw_archive_path(self, architecture):\nreturn self.get_linked_archive_path(architecture) + \".ufwbuild\"\n\n# Get the full path to the executable of an archive.\n#\ndef get_exe_path(self, node):\npath = os.path.join(*node['pathComponents'])\nif node['fileType'] == 'wrapper.framework':\n# Frameworks are directories, so go one deeper\npath = os.path.join(path, os.path.splitext(node['pathComponents'][-1])[0])\nreturn path\n\n# Get the path to the directory containing the archive.\n#\ndef get_containing_path(self, node):\nreturn os.path.join(*node['pathComponents'])\n\ndef get_archive_search_paths(self):\nlog.info(\"Search paths = %s\" % set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries]))\nreturn set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries])\n\n# Command to link all objects of a single architecture.\n#\ndef get_single_arch_link_command(self, architecture):\ncmd = [self.libtool_path,\n\"-static\",\n\"-arch_only\", architecture,\n\"-syslibroot\", os.environ['SDKROOT'],\n\"-L%s\" % os.environ['TARGET_BUILD_DIR'],\n\"-filelist\", os.environ['LINK_FILE_LIST_%s_%s' % (os.environ['CURRENT_VARIANT'], architecture)]]\nif os.environ.get('OTHER_LDFLAGS', False):\ncmd += [os.environ['OTHER_LDFLAGS']]\nif os.environ.get('WARNING_LDFLAGS', False):\ncmd += [os.environ['WARNING_LDFLAGS']]\n#        cmd += [\"-L%s\" % libpath for libpath in self.get_archive_search_paths()]\ncmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\ncmd += [self.get_exe_path(lib) for lib in self.static_libraries]\ncmd += [\"-o\", self.get_linked_ufw_archive_path(architecture)]\nreturn cmd\n\n# Command to link all local architectures for the current configuration\n# into an archive. This reads all libraries + the UFW-built archives and\n# overwrites the final product.\n#\ndef get_local_archs_link_command(self):\ncmd = [self.libtool_path,\n\"-static\"]\ncmd += self.local_linked_archive_paths\ncmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\ncmd += [self.get_exe_path(lib) for lib in self.static_libraries]\ncmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\nreturn cmd\n\n# Command to link all architectures into a universal archive.\n# This reads all UFW-built archives and overwrites the final product.\n#\ndef get_all_archs_link_command(self):\ncmd = [self.libtool_path,\n\"-static\"]\ncmd += self.local_linked_archive_paths + self.build_state.slave_linked_archive_paths\ncmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\nreturn cmd\n\n# Build up an environment for the slave process. This uses BUILD_ROOT\n# and TEMP_ROOT to convert all environment variables to values suitable\n# for the slave build environment so that xcodebuild doesn't try to build\n# in the project directory under \"build\".\n#\ndef get_slave_environment(self):\nignored = ['LD_MAP_FILE_PATH',\n'HEADER_SEARCH_PATHS',\n'LIBRARY_SEARCH_PATHS',\n'FRAMEWORK_SEARCH_PATHS']\nbuild_root = os.environ['BUILD_ROOT']\ntemp_root = os.environ['TEMP_ROOT']\nnewenv = {}\nfor key, value in os.environ.items():\nif key not in ignored and not key.startswith('LINK_FILE_LIST_') and not key.startswith('LD_DEPENDENCY_'):\nif build_root in value or temp_root in value:\nnewenv[key] = value.replace(self.local_platform, self.other_platform)\nreturn newenv\n\n# Command to invoke xcodebuild on the slave platform.\n#\ndef get_slave_project_build_command(self):\ncmd = [\"xcodebuild\",\n\"-project\",\nos.environ['PROJECT_FILE_PATH'],\n\"-target\",\nos.environ['TARGET_NAME'],\n\"-configuration\",\nos.environ['CONFIGURATION'],\n\"-sdk\",\nself.other_platform + self.sdk_version]\ncmd += [\"%s=%s\" % (key, value) for key, value in self.get_slave_environment().items()]\ncmd += [\"UFW_MASTER_PLATFORM=\" + os.environ['PLATFORM_NAME']]\ncmd += [os.environ['ACTION']]\nreturn cmd\n\n\n\n##############################################################################\n#\n# Utility Functions\n#\n##############################################################################\n\n# Split a path into a list of path components.\n#\ndef splitpath(path, maxdepth=20):\n(head, tail) = os.path.split(path)\nreturn splitpath(head, maxdepth - 1) + [tail] if maxdepth and head and head != path else [ head or tail ]\n\n# Remove all subdirectories under a path.\n#\ndef remove_subdirs(path, ignore_files):\nif os.path.exists(path):\nfor filename in filter(lambda x: x not in ignore_files, os.listdir(path)):\nfullpath = os.path.join(path, filename)\nif os.path.isdir(fullpath):\nlog.info(\"Remove %s\" % fullpath)\nshutil.rmtree(fullpath)\n\n# Make whatever parent paths are necessary for a path to exist.\n#\ndef ensure_path_exists(path):\nif not os.path.isdir(path):\nos.makedirs(path)\n\n# Make whatever parent paths are necessary for a path's parent to exist.\n#\ndef ensure_parent_exists(path):\nparent = os.path.dirname(path)\nif not os.path.isdir(parent):\nos.makedirs(parent)\n\n# Remove a file or dir if it exists.\n#\ndef remove_path(path):\nif os.path.exists(path):\nif os.path.isdir(path) and not os.path.islink(path):\nshutil.rmtree(path)\nelse:\nos.remove(path)\n\n# Move a file or dir, replacing the destination if it exists.\n#\ndef move_file(src, dst):\nif src == dst or not os.path.isfile(src):\nreturn\nlog.info(\"Move %s to %s\" % (src, dst))\nensure_parent_exists(dst)\nremove_path(dst)\nshutil.move(src, dst)\n\n# Copy a file or dir, replacing the destination if it exists already.\n#\ndef copy_overwrite(src, dst):\nif src != dst:\nremove_path(dst)\nensure_parent_exists(dst)\nshutil.copytree(src, dst, symlinks=True)\n\n# Attempt to symlink link_path -> link_to.\n# link_to must be a path relative to link_path's parent and must exist.\n# If link_path already exists, do nothing.\n#\ndef attempt_symlink(link_path, link_to):\n# Only allow linking to an existing file\nos.stat(os.path.abspath(os.path.join(link_path, \"..\", link_to)))\n\n# Only make the link if it hasn't already been made\nif not os.path.exists(link_path):\nlog.info(\"Symlink %s -> %s\" % (link_path, link_to))\nos.symlink(link_to, link_path)\n\n# Takes the last entry in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef top_level_file_path(base_path, path_list):\nreturn os.path.join(base_path, os.path.split(path_list[-1])[-1])\n\n# Takes all entries in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef full_file_path(base_path, path_list):\nreturn os.path.join(*([base_path] + path_list))\n\n# Print a command before executing it.\n# Also print out all output from the command to STDOUT.\n#\ndef print_and_call(cmd):\nlog.info(\"Cmd \" + \" \".join(cmd))\np = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nresult = p.communicate()[0]\nif len(result) > 0:\nlog.info(result)\nif p.returncode != 0:\nraise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Special print-and-call command for the slave build that strips out\n# xcodebuild's spammy list of environment variables.\n#\ndef print_and_call_slave_build(cmd, other_platform):\nseparator = '=== BUILD NATIVE TARGET '\np = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nresult = p.communicate()[0].split(separator)\nif len(result) == 1:\nresult = result[0]\nelse:\nresult = separator + result[1]\nlog.info(\"Cmd \" + \" \".join(cmd) + \"\\n\" + result)\nif p.returncode != 0:\nraise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Issue a warning and record that a warning has been issued.\n#\ndef issue_warning(msg, *args, **kwargs):\nglobal issued_warnings\nissued_warnings = True\nlog.warn(msg, *args, **kwargs)\n\n\n\n##############################################################################\n#\n# Main Application\n#\n##############################################################################\n\n# Check if we are running as master.\n#\ndef is_master():\nreturn os.environ.get('UFW_MASTER_PLATFORM', os.environ['PLATFORM_NAME']) == os.environ['PLATFORM_NAME']\n\n# DerivedData should almost never appear in any framework, library, or header\n# search paths. However, Xcode will sometimes add them in, so we check to make\n# sure.\n#\ndef check_for_derived_data_in_search_paths(project):\nsearch_path_keys = [\"FRAMEWORK_SEARCH_PATHS\", \"LIBRARY_SEARCH_PATHS\", \"HEADER_SEARCH_PATHS\"]\nbuild_configs = project.target['buildConfigurationList']['buildConfigurations']\nbuild_settings = filter(lambda x: x['name'] == os.environ['CONFIGURATION'], build_configs)[0]['buildSettings']\n\nfound_something = False\nfor path_key in filter(lambda x: x in build_settings, search_path_keys):\npath = build_settings[path_key]\nif \"DerivedData\" in path:\nfound_something = True\nlog.warn(\"Derived data in %s\" % path)\nissue_warning(\"'%s' contains reference to 'DerivedData'.\" % path_key)\nif found_something:\nlog.warn(\"Check your build settings and remove any entries that contain paths inside the DerivedData folder.\")\nlog.warn(\"Otherwise you can disable this warning by changing 'config_warn_derived_data' in this script.\")\n\n# Link local architectures into their respective archives.\n#\ndef link_local_archs(project):\nfor arch in project.local_architectures:\nprint_and_call(project.get_single_arch_link_command(arch))\n\n# Link only the local architectures into the final product, not the slave\n# architectures. For iphoneos, this will be armv6, armv7. For simulator, this\n# will be i386.\n#\ndef link_combine_local_archs(project):\nprint_and_call(project.get_local_archs_link_command())\n\n# Link all architectures into the final product.\n#\ndef link_combine_all_archs(project):\nprint_and_call(project.get_all_archs_link_command())\n\n# Check if we should open the build directory after a successful build.\n#\ndef should_open_build_dir():\nenv_setting = os.environ.get('UFW_OPEN_BUILD_DIR', None)\nif env_setting is not None:\nreturn env_setting\n\nreturn config_open_build_dir\n\n# Open the build dir in Finder.\n#\ndef open_build_dir():\nprint_and_call(['open', os.environ['TARGET_BUILD_DIR']])\n\n# Check if the build was started by selecting \"Archive\" under \"Product\" in\n# Xcode.\n#\ndef is_archive_build():\n# ACTION is always 'build', but perhaps Apple will fix this someday?\narchive_build = os.environ['ACTION'] == 'archive'\n\nif not archive_build:\n# This can be passed in as an env variable when building from command line.\narchive_build = os.environ.get('UFW_ACTION', None) == 'archive'\n\nbuild_dir = splitpath(os.environ['BUILD_DIR'])\nif not archive_build:\n# This partial path is used when you select \"archive\" from within Xcode.\narchive_build = 'ArchiveIntermediates' in build_dir\n\n# It only counts as a full archive build if this target is being built into\n# its own build dir (not being built as a dependency of another target)\nif archive_build:\narchive_build = os.environ['TARGET_NAME'] in build_dir\n\nreturn archive_build\n\n# Xcode by default throws all public headers into the top level directory.\n# This function moves them to their expected deep hierarchy.\n#\ndef build_deep_header_hierarchy(project):\nheader_path_top = config_deep_header_top\nif not header_path_top:\nheader_path_top = os.path.commonprefix(project.header_paths)\nelse:\nheader_path_top = splitpath(header_path_top)\n\nbuilt_headers_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['PUBLIC_HEADERS_FOLDER_PATH'])\nmovable_headers = project.movable_headers_relative_to(header_path_top)\n\n# Remove subdirs if they only contain files that have been rebuilt\nignore_headers = filter(lambda x: not os.path.isfile(top_level_file_path(built_headers_path, x)), movable_headers)\nremove_subdirs(built_headers_path, [file[0] for file in ignore_headers])\n\n# Move rebuilt headers into their proper subdirs\nfor header in movable_headers:\nmove_file(top_level_file_path(built_headers_path, header), full_file_path(built_headers_path, header))\n\n# Add all symlinks needed to make a full framework structure:\n#\n# MyFramework.framework\n# |-- MyFramework -> Versions/Current/MyFramework\n# |-- Headers -> Versions/Current/Headers\n# |-- Resources -> Versions/Current/Resources\n# `-- Versions\n#     |-- A\n#     |   |-- MyFramework\n#     |   |-- Headers\n#     |   |   `-- MyFramework.h\n#     |   `-- Resources\n#     |       |-- Info.plist\n#     |       |-- MyViewController.nib\n#     |       `-- en.lproj\n#     |           `-- InfoPlist.strings\n#     `-- Current -> A\n#\ndef add_symlinks_to_framework(project):\nbase_dir = project.local_built_fw_path\nattempt_symlink(os.path.join(base_dir, \"Versions\", \"Current\"), os.environ['FRAMEWORK_VERSION'])\nif os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Headers\")):\nattempt_symlink(os.path.join(base_dir, \"Headers\"), os.path.join(\"Versions\", \"Current\", \"Headers\"))\nif os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Resources\")):\nattempt_symlink(os.path.join(base_dir, \"Resources\"), os.path.join(\"Versions\", \"Current\", \"Resources\"))\nattempt_symlink(os.path.join(base_dir, os.environ['EXECUTABLE_NAME']), os.path.join(\"Versions\", \"Current\", os.environ['EXECUTABLE_NAME']))\n\n# Build an embedded framework structure.\n# An embedded framework contains the actual framework, plus a \"Resources\"\n# directory containing symlinks to all resources found in the actual framework,\n# with the exception of \"Info.plist\" and anything ending in \".lproj\":\n#\n# MyFramework.embeddedframework\n# |-- MyFramework.framework\n# |   |-- MyFramework -> Versions/Current/MyFramework\n# |   |-- Headers -> Versions/Current/Headers\n# |   |-- Resources -> Versions/Current/Resources\n# |   `-- Versions\n# |       |-- A\n# |       |   |-- MyFramework\n# |       |   |-- Headers\n# |       |   |   `-- MyFramework.h\n# |       |   `-- Resources\n# |       |       |-- Info.plist\n# |       |       |-- MyViewController.nib\n# |       |       `-- en.lproj\n# |       |           `-- InfoPlist.strings\n# |       `-- Current -> A\n# `-- Resources\n#     `-- MyViewController.nib -> ../MyFramework.framework/Resources/MyViewController.nib\n#\ndef build_embedded_framework(project):\nfw_path = project.local_built_fw_path\nembedded_path = project.local_built_embedded_fw_path\nfw_name = os.environ['WRAPPER_NAME']\n\nif (os.path.islink(fw_path)):\n# If the framework path is a link, the build result already in embeddedframework.\n# Just recreate embeddedframework's Resources\nremove_path(os.path.join(embedded_path, \"Resources\"))\nelse:\nremove_path(embedded_path)\nensure_path_exists(embedded_path)\ncopy_overwrite(fw_path, os.path.join(embedded_path, fw_name))\n\n# Create embeddedframework's Resources\nensure_path_exists(os.path.join(embedded_path, \"Resources\"))\nsymlink_source = os.path.join(\"..\", fw_name, \"Resources\")\nsymlink_path = os.path.join(embedded_path, \"Resources\")\nif os.path.isdir(os.path.join(fw_path, \"Resources\")):\nfor file in filter(lambda x: x != \"Info.plist\" and not x.endswith(\".lproj\"), os.listdir(os.path.join(fw_path, \"Resources\"))):\nattempt_symlink(os.path.join(symlink_path, file), os.path.join(symlink_source, file))\n\n# Remove the normal framework and replace it with a symlink to the copy\n# in the embedded framework. This is needed because Xcode runs its strip\n# phase AFTER the script runs.\nembed_fw_wrapper = os.path.splitext(os.environ['WRAPPER_NAME'])[0] + \".embeddedframework\"\nremove_path(fw_path)\nattempt_symlink(fw_path, os.path.join(embed_fw_wrapper, os.environ['WRAPPER_NAME']))\n\n\n# Run the build process in slave mode to build the other configuration\n# (device/simulator).\n#\ndef run_slave_build(project):\nprint_and_call_slave_build(project.get_slave_project_build_command(), project.other_platform)\n\n# Run the build process.\n#\ndef run_build():\nproject = Project(os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\"))\n\n# Issue warnings only if we're master.\nif is_master():\nif len(project.compilable_sources) == 0:\nraise Exception(\"No compilable sources found. Please add at least one source file to build target %s.\" % os.environ['TARGET_NAME'])\n\nif config_warn_derived_data:\ncheck_for_derived_data_in_search_paths(project)\nif config_warn_no_public_headers and len(project.public_headers) == 0:\nissue_warning('No headers in build target %s were marked public. Please move at least one header to \"Public\" in the \"Copy Headers\" build phase.' % os.environ['TARGET_NAME'])\n\n# Only build slave if this is an archive build.\nif is_archive_build():\nif is_master():\nlog.debug(\"Building as MASTER\")\n# The slave-side linker tries to include this (nonexistent) path as\n# a library path.\nensure_path_exists(project.get_slave_environment()['BUILT_PRODUCTS_DIR'])\nproject.build_state.persist()\nrun_slave_build(project)\nproject.build_state.reload()\nelse:\nlog.debug(\"Building as SLAVE\")\nproject.build_state.reload()\nproject.build_state.set_slave_properties(project.local_architectures,\nproject.local_linked_archive_paths,\nproject.local_built_fw_path,\nproject.local_built_embedded_fw_path)\nproject.build_state.persist()\n\nlink_local_archs(project)\n\n# Only do a universal binary when building an archive.\nif is_archive_build() and is_master():\nlink_combine_all_archs(project)\nelse:\nlink_combine_local_archs(project)\n\nif config_deep_header_hierarchy:\nbuild_deep_header_hierarchy(project)\n\nadd_symlinks_to_framework(project)\n\nif is_master():\nif config_framework_type == 'embeddedframework':\nbuild_embedded_framework(project)\nelif config_framework_type != 'framework':\nraise Exception(\"%s: Unknown framework type for config_framework_type\" % config_framework_type)\n\n\nif __name__ == \"__main__\":\nlog_handler = logging.StreamHandler()\nlog_handler.setFormatter(logging.Formatter(\"%(name)s (\" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\nlog.addHandler(log_handler)\nlog.setLevel(config_log_level)\n\nerror_code = 0\nprefix = \"M\" if is_master() else \"S\"\nlog_handler.setFormatter(logging.Formatter(\"%(name)s (\" + prefix + \" \" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n\nlog.debug(\"Begin build process\")\n\nif config_deep_header_top:\nconfig_deep_header_top = string.Template(config_deep_header_top).substitute(os.environ)\n\ntry:\nrun_build()\nif issued_warnings:\nif config_fail_on_warnings:\nerror_code = 1\nlog.warn(\"Build completed with warnings\")\nelse:\nlog.info(\"Build completed\")\nif not is_archive_build():\nlog.info(\"Note: This is *NOT* a universal framework build. To build as a universal framework, do an archive build.\")\nlog.info(\"To do an archive build from command line, use \\\"xcodebuild -configuration Release UFW_ACTION=archive clean build\\\"\")\nexcept Exception:\ntraceback.print_exc(file=sys.stdout)\nerror_code = 1\nlog.error(\"Build failed\")\nfinally:\nif error_code == 0 and is_archive_build() and is_master():\nlog.info(\"Built framework is in \" + os.environ['TARGET_BUILD_DIR'])\nif should_open_build_dir():\nopen_build_dir()\nsys.exit(error_code)\n";
		};
		C9BD6C7813EEE06400F4D8F4 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "# Run the unit tests in this test bundle.\n\"${SYSTEM_DEVELOPER_DIR}/Tools/RunUnitTests\"\n";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		6872039A187F4FD800562041 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6820461D187F588D0048D382 /* NSBundle+Venmo.m in Sources */,
				6820461E187F588D0048D382 /* NSDictionary+Venmo.m in Sources */,
				6820461F187F588D0048D382 /* NSError+Venmo.m in Sources */,
				68204620187F588D0048D382 /* NSString+MD5Addition.m in Sources */,
				68204621187F588D0048D382 /* NSString+Venmo.m in Sources */,
				68204622187F588D0048D382 /* NSURL+Venmo.m in Sources */,
				68204623187F588D0048D382 /* UIDevice+IdentifierAddition.m in Sources */,
				68204624187F588D0048D382 /* VenmoActivityView.m in Sources */,
				68204625187F588D0048D382 /* VenmoBase64.m in Sources */,
				68204626187F588D0048D382 /* VenmoHMAC_SHA256.m in Sources */,
				68204619187F586B0048D382 /* VenmoClient.m in Sources */,
				6820461A187F586B0048D382 /* VenmoErrors.m in Sources */,
				6820461B187F586B0048D382 /* VenmoTransaction.m in Sources */,
				6820461C187F586B0048D382 /* VenmoViewController.m in Sources */,
				687203AB187F4FD800562041 /* VenmoAppSwitchSDK.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		687203AC187F4FD800562041 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				687203C1187F4FD800562041 /* VenmoAppSwitchSDKTests.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C9550E7213F5C48900212008 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				C9550E8113F5C48900212008 /* main.m in Sources */,
				C9550E8513F5C48900212008 /* AppDelegate.m in Sources */,
				C9550E8813F5C48900212008 /* WelcomeViewController.m in Sources */,
				C93E83551423F995001FD5CE /* JSONKit.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C9BD6C6613EEE06400F4D8F4 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				75DEB9E917CD04190050B284 /* UIDevice+IdentifierAddition.m in Sources */,
				C923BC8B1412A60600E8B194 /* NSBundle+Venmo.m in Sources */,
				75DEB9E317CD040F0050B284 /* NSString+MD5Addition.m in Sources */,
				C96ED75213FC83C30033EF3D /* NSDictionary+Venmo.m in Sources */,
				C9C04BEB141E40DB0033DDFF /* NSError+Venmo.m in Sources */,
				C96ED74E13FC83A20033EF3D /* NSString+Venmo.m in Sources */,
				C9842F15140EE7A6000A5924 /* NSURL+Venmo.m in Sources */,
				C94D4A9313FDD5CB00CE8EC0 /* VenmoActivityView.m in Sources */,
				C9CCEF4B13F9720500654E24 /* VenmoBase64.m in Sources */,
				C9A23605141D425F00C9A8FF /* VenmoHMAC_SHA256.m in Sources */,
				C9DB58F713F0941200EB4C16 /* VenmoClient.m in Sources */,
				C9C04BEF141EE9D50033DDFF /* VenmoErrors.m in Sources */,
				C9BD6C7413EEE06400F4D8F4 /* VenmoTransaction.m in Sources */,
				C9DB590A13F18BD000EB4C16 /* VenmoViewController.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C9BD6C7513EEE06400F4D8F4 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				C9FDFF4F1404007D0021D967 /* VenmoSpecsSpecs.m in Sources */,
				C96ED75813FC87010033EF3D /* NSDictionarySpecs.m in Sources */,
				C9FDFF481403EF510021D967 /* NSInvocation+SpecMethodPrefix.m in Sources */,
				C96ED75513FC85060033EF3D /* NSStringSpecs.m in Sources */,
				C9CCEF4E13F9A82400654E24 /* VenmoBase64Specs.m in Sources */,
				C9DB590013F0A77E00EB4C16 /* VenmoClientSpecs.m in Sources */,
				C9BD6C8D13EEE06400F4D8F4 /* VenmoTransactionSpecs.m in Sources */,
				C9DB487A13F1FE1A007241B7 /* VenmoViewControllerSpecs.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		687203B6187F4FD800562041 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 6872039F187F4FD800562041 /* VenmoAppSwitchSDK */;
			targetProxy = 687203B5187F4FD800562041 /* PBXContainerItemProxy */;
		};
		687203B8187F4FD800562041 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 6872039F187F4FD800562041 /* VenmoAppSwitchSDK */;
			targetProxy = 687203B7187F4FD800562041 /* PBXContainerItemProxy */;
		};
		C93E836C1423FA8B001FD5CE /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = C9BD6C6913EEE06400F4D8F4 /* Venmo */;
			targetProxy = C93E836B1423FA8B001FD5CE /* PBXContainerItemProxy */;
		};
		C93E836E1423FA95001FD5CE /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			name = Kiwi;
			targetProxy = C93E836D1423FA95001FD5CE /* PBXContainerItemProxy */;
		};
		C9AE5B3113FB0783001D0971 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = C9550E7513F5C48900212008 /* VenmoApp */;
			targetProxy = C9AE5B3013FB0783001D0971 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		687203A5187F4FD800562041 /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				687203A6187F4FD800562041 /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
		687203BD187F4FD800562041 /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				687203BE187F4FD800562041 /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		687203C3187F4FD800562041 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "VenmoAppSwitchSDK/VenmoAppSwitchSDK-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				INFOPLIST_FILE = "VenmoAppSwitchSDK/VenmoAppSwitchSDK-Info.plist";
				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
				OTHER_LDFLAGS = "-ObjC";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Debug;
		};
		687203C4187F4FD800562041 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				ENABLE_NS_ASSERTIONS = NO;
				FRAMEWORK_VERSION = A;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "VenmoAppSwitchSDK/VenmoAppSwitchSDK-Prefix.pch";
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				INFOPLIST_FILE = "VenmoAppSwitchSDK/VenmoAppSwitchSDK-Info.plist";
				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
				OTHER_LDFLAGS = "-ObjC";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Release;
		};
		687203C6187F4FD800562041 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/VenmoApp.app/VenmoApp";
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
					"$(DEVELOPER_FRAMEWORKS_DIR)",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "VenmoAppSwitchSDK/VenmoAppSwitchSDK-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				INFOPLIST_FILE = "VenmoAppSwitchSDKTests/VenmoAppSwitchSDKTests-Info.plist";
				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				WRAPPER_EXTENSION = xctest;
			};
			name = Debug;
		};
		687203C7187F4FD800562041 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/VenmoApp.app/VenmoApp";
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				ENABLE_NS_ASSERTIONS = NO;
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
					"$(DEVELOPER_FRAMEWORKS_DIR)",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "VenmoAppSwitchSDK/VenmoAppSwitchSDK-Prefix.pch";
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				INFOPLIST_FILE = "VenmoAppSwitchSDKTests/VenmoAppSwitchSDKTests-Info.plist";
				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				WRAPPER_EXTENSION = xctest;
			};
			name = Release;
		};
		C9550E9313F5C48900212008 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "VenmoApp/Supporting Files/VenmoApp-Prefix.pch";
				HEADER_SEARCH_PATHS = "$(PROJECT_DIR)";
				INFOPLIST_FILE = "VenmoApp/Supporting Files/VenmoApp-Info.plist";
				OTHER_LDFLAGS = (
					"-ObjC",
					"-force_load",
					"${BUILT_PRODUCTS_DIR}/libVenmo.a",
				);
				PRODUCT_NAME = "$(TARGET_NAME)";
				WRAPPER_EXTENSION = app;
			};
			name = Debug;
		};
		C9550E9413F5C48900212008 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "VenmoApp/Supporting Files/VenmoApp-Prefix.pch";
				HEADER_SEARCH_PATHS = "$(PROJECT_DIR)";
				INFOPLIST_FILE = "VenmoApp/Supporting Files/VenmoApp-Info.plist";
				OTHER_CFLAGS = "-DNS_BLOCK_ASSERTIONS=1";
				OTHER_LDFLAGS = (
					"-ObjC",
					"-force_load",
					"${BUILT_PRODUCTS_DIR}/libVenmo.a",
				);
				PRODUCT_NAME = "$(TARGET_NAME)";
				WRAPPER_EXTENSION = app;
			};
			name = Release;
		};
		C9BD6C8E13EEE06400F4D8F4 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_VERSION = com.apple.compilers.llvm.clang.1_0;
				GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 4.0;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		C9BD6C8F13EEE06400F4D8F4 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_PREPROCESSOR_DEFINITIONS = "NS_BLOCK_ASSERTIONS=1";
				GCC_VERSION = com.apple.compilers.llvm.clang.1_0;
				GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 4.0;
				SDKROOT = iphoneos;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		C9BD6C9113EEE06400F4D8F4 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DSTROOT = /tmp/Venmo.dst;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "Venmo/Supporting Files/Venmo-Prefix.pch";
				OTHER_LDFLAGS = "-ObjC";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
			};
			name = Debug;
		};
		C9BD6C9213EEE06400F4D8F4 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DSTROOT = /tmp/Venmo.dst;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "Venmo/Supporting Files/Venmo-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = "NS_BLOCK_ASSERTIONS=1";
				OTHER_LDFLAGS = "-ObjC";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
			};
			name = Release;
		};
		C9BD6C9413EEE06400F4D8F4 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/VenmoApp.app/VenmoApp";
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(DEVELOPER_LIBRARY_DIR)/Frameworks",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "VenmoSpecs/Supporting Files/VenmoSpecs-Prefix.pch";
				HEADER_SEARCH_PATHS = Libraries/Kiwi;
				OTHER_LDFLAGS = (
					"-ObjC",
					"-force_load",
					"${BUILT_PRODUCTS_DIR}/libKiwi.a",
					"${BUILT_PRODUCTS_DIR}/libVenmo.a",
				);
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				WRAPPER_EXTENSION = octest;
			};
			name = Debug;
		};
		C9BD6C9513EEE06400F4D8F4 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/VenmoApp.app/VenmoApp";
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(DEVELOPER_LIBRARY_DIR)/Frameworks",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "VenmoSpecs/Supporting Files/VenmoSpecs-Prefix.pch";
				HEADER_SEARCH_PATHS = Libraries/Kiwi;
				OTHER_LDFLAGS = (
					"-ObjC",
					"-force_load",
					"${BUILT_PRODUCTS_DIR}/libKiwi.a",
					"${BUILT_PRODUCTS_DIR}/libVenmo.a",
				);
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				WRAPPER_EXTENSION = octest;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		687203C2187F4FD800562041 /* Build configuration list for PBXNativeTarget "VenmoAppSwitchSDK" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				687203C3187F4FD800562041 /* Debug */,
				687203C4187F4FD800562041 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		687203C5187F4FD800562041 /* Build configuration list for PBXNativeTarget "VenmoAppSwitchSDKTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				687203C6187F4FD800562041 /* Debug */,
				687203C7187F4FD800562041 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		C9550E9213F5C48900212008 /* Build configuration list for PBXNativeTarget "VenmoApp" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				C9550E9313F5C48900212008 /* Debug */,
				C9550E9413F5C48900212008 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		C9BD6C6413EEE06400F4D8F4 /* Build configuration list for PBXProject "Venmo" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				C9BD6C8E13EEE06400F4D8F4 /* Debug */,
				C9BD6C8F13EEE06400F4D8F4 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		C9BD6C9013EEE06400F4D8F4 /* Build configuration list for PBXNativeTarget "Venmo" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				C9BD6C9113EEE06400F4D8F4 /* Debug */,
				C9BD6C9213EEE06400F4D8F4 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		C9BD6C9313EEE06400F4D8F4 /* Build configuration list for PBXNativeTarget "VenmoSpecs" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				C9BD6C9413EEE06400F4D8F4 /* Debug */,
				C9BD6C9513EEE06400F4D8F4 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = C9BD6C6113EEE06400F4D8F4 /* Project object */;
}
